
testencoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007144  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007258  08007258  00017258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f8  080072f8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080072f8  080072f8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072f8  080072f8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000180  08007480  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007480  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001349e  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021e8  00000000  00000000  00033647  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  00035830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015dc7  00000000  00000000  00037388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af27  00000000  00000000  0004d14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075402  00000000  00000000  00058076  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004050  00000000  00000000  000cd4f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800723c 	.word	0x0800723c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800723c 	.word	0x0800723c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2uiz>:
 8001094:	0042      	lsls	r2, r0, #1
 8001096:	d20e      	bcs.n	80010b6 <__aeabi_f2uiz+0x22>
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800109c:	d30b      	bcc.n	80010b6 <__aeabi_f2uiz+0x22>
 800109e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d409      	bmi.n	80010bc <__aeabi_f2uiz+0x28>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	fa23 f002 	lsr.w	r0, r3, r2
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr
 80010bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c0:	d101      	bne.n	80010c6 <__aeabi_f2uiz+0x32>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	d102      	bne.n	80010cc <__aeabi_f2uiz+0x38>
 80010c6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ca:	4770      	bx	lr
 80010cc:	f04f 0000 	mov.w	r0, #0
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x28>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x28>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f91f 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f005 fbbe 	bl	8006870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f937 	bl	8001392 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f8ff 	bl	800133e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000017c 	.word	0x2000017c
 8001158:	20000004 	.word	0x20000004
 800115c:	20000000 	.word	0x20000000

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a03      	ldr	r2, [pc, #12]	; (8001180 <HAL_IncTick+0x20>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000004 	.word	0x20000004
 8001180:	20000220 	.word	0x20000220

08001184 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000220 	.word	0x20000220

08001198 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4906      	ldr	r1, [pc, #24]	; (8001228 <NVIC_EnableIRQ+0x2c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100

0800122c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	da0b      	bge.n	8001258 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <NVIC_SetPriority+0x4c>)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	3b04      	subs	r3, #4
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001256:	e009      	b.n	800126c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <NVIC_SetPriority+0x50>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000e100 	.word	0xe000e100

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff90 	bl	800122c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff31 	bl	8001198 <NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff46 	bl	80011e0 <NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff39 	bl	80011fc <NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa2 	bl	80012e4 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d005      	beq.n	80013ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e051      	b.n	8001472 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 020e 	bic.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <HAL_DMA_Abort_IT+0xd0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d029      	beq.n	800144c <HAL_DMA_Abort_IT+0xa0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <HAL_DMA_Abort_IT+0xd4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d022      	beq.n	8001448 <HAL_DMA_Abort_IT+0x9c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <HAL_DMA_Abort_IT+0xd8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d01a      	beq.n	8001442 <HAL_DMA_Abort_IT+0x96>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_DMA_Abort_IT+0xdc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d012      	beq.n	800143c <HAL_DMA_Abort_IT+0x90>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_DMA_Abort_IT+0xe0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00a      	beq.n	8001436 <HAL_DMA_Abort_IT+0x8a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_DMA_Abort_IT+0xe4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d102      	bne.n	8001430 <HAL_DMA_Abort_IT+0x84>
 800142a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800142e:	e00e      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001434:	e00b      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143a:	e008      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	e005      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	e002      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001448:	2310      	movs	r3, #16
 800144a:	e000      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 800144c:	2301      	movs	r3, #1
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_DMA_Abort_IT+0xe8>)
 8001450:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
    } 
  }
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40020008 	.word	0x40020008
 8001480:	4002001c 	.word	0x4002001c
 8001484:	40020030 	.word	0x40020030
 8001488:	40020044 	.word	0x40020044
 800148c:	40020058 	.word	0x40020058
 8001490:	4002006c 	.word	0x4002006c
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	e127      	b.n	800170c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80014bc:	2201      	movs	r2, #1
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8116 	bne.w	8001706 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d034      	beq.n	800154c <HAL_GPIO_Init+0xb4>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d80d      	bhi.n	8001502 <HAL_GPIO_Init+0x6a>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d02b      	beq.n	8001542 <HAL_GPIO_Init+0xaa>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d804      	bhi.n	80014f8 <HAL_GPIO_Init+0x60>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d031      	beq.n	8001556 <HAL_GPIO_Init+0xbe>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d01c      	beq.n	8001530 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f6:	e048      	b.n	800158a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d043      	beq.n	8001584 <HAL_GPIO_Init+0xec>
 80014fc:	2b11      	cmp	r3, #17
 80014fe:	d01b      	beq.n	8001538 <HAL_GPIO_Init+0xa0>
          break;
 8001500:	e043      	b.n	800158a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001502:	4a87      	ldr	r2, [pc, #540]	; (8001720 <HAL_GPIO_Init+0x288>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d026      	beq.n	8001556 <HAL_GPIO_Init+0xbe>
 8001508:	4a85      	ldr	r2, [pc, #532]	; (8001720 <HAL_GPIO_Init+0x288>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d806      	bhi.n	800151c <HAL_GPIO_Init+0x84>
 800150e:	4a85      	ldr	r2, [pc, #532]	; (8001724 <HAL_GPIO_Init+0x28c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d020      	beq.n	8001556 <HAL_GPIO_Init+0xbe>
 8001514:	4a84      	ldr	r2, [pc, #528]	; (8001728 <HAL_GPIO_Init+0x290>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01d      	beq.n	8001556 <HAL_GPIO_Init+0xbe>
          break;
 800151a:	e036      	b.n	800158a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800151c:	4a83      	ldr	r2, [pc, #524]	; (800172c <HAL_GPIO_Init+0x294>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0xbe>
 8001522:	4a83      	ldr	r2, [pc, #524]	; (8001730 <HAL_GPIO_Init+0x298>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d016      	beq.n	8001556 <HAL_GPIO_Init+0xbe>
 8001528:	4a82      	ldr	r2, [pc, #520]	; (8001734 <HAL_GPIO_Init+0x29c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0xbe>
          break;
 800152e:	e02c      	b.n	800158a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	623b      	str	r3, [r7, #32]
          break;
 8001536:	e028      	b.n	800158a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	3304      	adds	r3, #4
 800153e:	623b      	str	r3, [r7, #32]
          break;
 8001540:	e023      	b.n	800158a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	3308      	adds	r3, #8
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e01e      	b.n	800158a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	330c      	adds	r3, #12
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e019      	b.n	800158a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800155e:	2304      	movs	r3, #4
 8001560:	623b      	str	r3, [r7, #32]
          break;
 8001562:	e012      	b.n	800158a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	611a      	str	r2, [r3, #16]
          break;
 8001576:	e008      	b.n	800158a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	615a      	str	r2, [r3, #20]
          break;
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2bff      	cmp	r3, #255	; 0xff
 800158e:	d801      	bhi.n	8001594 <HAL_GPIO_Init+0xfc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	e001      	b.n	8001598 <HAL_GPIO_Init+0x100>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3304      	adds	r3, #4
 8001598:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2bff      	cmp	r3, #255	; 0xff
 800159e:	d802      	bhi.n	80015a6 <HAL_GPIO_Init+0x10e>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x114>
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	3b08      	subs	r3, #8
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	210f      	movs	r1, #15
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	401a      	ands	r2, r3
 80015be:	6a39      	ldr	r1, [r7, #32]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8096 	beq.w	8001706 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <HAL_GPIO_Init+0x2a0>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a56      	ldr	r2, [pc, #344]	; (8001738 <HAL_GPIO_Init+0x2a0>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b54      	ldr	r3, [pc, #336]	; (8001738 <HAL_GPIO_Init+0x2a0>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80015f2:	4a52      	ldr	r2, [pc, #328]	; (800173c <HAL_GPIO_Init+0x2a4>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	4013      	ands	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a49      	ldr	r2, [pc, #292]	; (8001740 <HAL_GPIO_Init+0x2a8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x1ae>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_GPIO_Init+0x2ac>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x1aa>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a47      	ldr	r2, [pc, #284]	; (8001748 <HAL_GPIO_Init+0x2b0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x1a6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a46      	ldr	r2, [pc, #280]	; (800174c <HAL_GPIO_Init+0x2b4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x1a2>
 8001636:	2303      	movs	r3, #3
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x1b0>
 800163a:	2304      	movs	r3, #4
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x1b0>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x1b0>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x1b0>
 8001646:	2300      	movs	r3, #0
 8001648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001658:	4938      	ldr	r1, [pc, #224]	; (800173c <HAL_GPIO_Init+0x2a4>)
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4936      	ldr	r1, [pc, #216]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4931      	ldr	r1, [pc, #196]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 800168a:	4013      	ands	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	492c      	ldr	r1, [pc, #176]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
 80016a6:	e006      	b.n	80016b6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4927      	ldr	r1, [pc, #156]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4922      	ldr	r1, [pc, #136]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
 80016ce:	e006      	b.n	80016de <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	491d      	ldr	r1, [pc, #116]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016da:	4013      	ands	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	4918      	ldr	r1, [pc, #96]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60cb      	str	r3, [r1, #12]
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	43db      	mvns	r3, r3
 8001700:	4913      	ldr	r1, [pc, #76]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 8001702:	4013      	ands	r3, r2
 8001704:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	3301      	adds	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	2b0f      	cmp	r3, #15
 8001710:	f67f aed4 	bls.w	80014bc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001714:	bf00      	nop
 8001716:	372c      	adds	r7, #44	; 0x2c
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	10210000 	.word	0x10210000
 8001724:	10110000 	.word	0x10110000
 8001728:	10120000 	.word	0x10120000
 800172c:	10310000 	.word	0x10310000
 8001730:	10320000 	.word	0x10320000
 8001734:	10220000 	.word	0x10220000
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	40010800 	.word	0x40010800
 8001744:	40010c00 	.word	0x40010c00
 8001748:	40011000 	.word	0x40011000
 800174c:	40011400 	.word	0x40011400
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001770:	e003      	b.n	800177a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	041a      	lsls	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	611a      	str	r2, [r3, #16]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0e7      	b.n	800196e <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f005 f88e 	bl	80068d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2224      	movs	r2, #36	; 0x24
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d0:	f001 fc24 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 80017d4:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a67      	ldr	r2, [pc, #412]	; (8001978 <HAL_I2C_Init+0x1f4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d807      	bhi.n	80017f0 <HAL_I2C_Init+0x6c>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4a66      	ldr	r2, [pc, #408]	; (800197c <HAL_I2C_Init+0x1f8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf94      	ite	ls
 80017e8:	2301      	movls	r3, #1
 80017ea:	2300      	movhi	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e006      	b.n	80017fe <HAL_I2C_Init+0x7a>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4a63      	ldr	r2, [pc, #396]	; (8001980 <HAL_I2C_Init+0x1fc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf94      	ite	ls
 80017f8:	2301      	movls	r3, #1
 80017fa:	2300      	movhi	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0b3      	b.n	800196e <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <HAL_I2C_Init+0x200>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a56      	ldr	r2, [pc, #344]	; (8001978 <HAL_I2C_Init+0x1f4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d802      	bhi.n	800182a <HAL_I2C_Init+0xa6>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	e009      	b.n	800183e <HAL_I2C_Init+0xba>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_I2C_Init+0x204>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	3301      	adds	r3, #1
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_I2C_Init+0x1f4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d80d      	bhi.n	800186a <HAL_I2C_Init+0xe6>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	3301      	adds	r3, #1
 800185e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf38      	it	cc
 8001866:	2304      	movcc	r3, #4
 8001868:	e04f      	b.n	800190a <HAL_I2C_Init+0x186>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d111      	bne.n	8001896 <HAL_I2C_Init+0x112>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1e59      	subs	r1, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	fbb1 f3f3 	udiv	r3, r1, r3
 8001884:	3301      	adds	r3, #1
 8001886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	e012      	b.n	80018bc <HAL_I2C_Init+0x138>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1e59      	subs	r1, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009a      	lsls	r2, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Init+0x140>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e022      	b.n	800190a <HAL_I2C_Init+0x186>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10e      	bne.n	80018ea <HAL_I2C_Init+0x166>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1e59      	subs	r1, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	fbb1 f3f3 	udiv	r3, r1, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e8:	e00f      	b.n	800190a <HAL_I2C_Init+0x186>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1e59      	subs	r1, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	009a      	lsls	r2, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001900:	3301      	adds	r3, #1
 8001902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69d9      	ldr	r1, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6919      	ldr	r1, [r3, #16]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6959      	ldr	r1, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699a      	ldr	r2, [r3, #24]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	000186a0 	.word	0x000186a0
 800197c:	001e847f 	.word	0x001e847f
 8001980:	003d08ff 	.word	0x003d08ff
 8001984:	431bde83 	.word	0x431bde83
 8001988:	10624dd3 	.word	0x10624dd3

0800198c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	461a      	mov	r2, r3
 8001998:	460b      	mov	r3, r1
 800199a:	817b      	strh	r3, [r7, #10]
 800199c:	4613      	mov	r3, r2
 800199e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019a4:	f7ff fbee 	bl	8001184 <HAL_GetTick>
 80019a8:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	f040 80ee 	bne.w	8001b94 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2319      	movs	r3, #25
 80019be:	2201      	movs	r2, #1
 80019c0:	4977      	ldr	r1, [pc, #476]	; (8001ba0 <HAL_I2C_Master_Transmit+0x214>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fda4 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
 80019d0:	e0e1      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_I2C_Master_Transmit+0x54>
 80019dc:	2302      	movs	r3, #2
 80019de:	e0da      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d007      	beq.n	8001a06 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a14:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2221      	movs	r2, #33	; 0x21
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2210      	movs	r2, #16
 8001a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	893a      	ldrh	r2, [r7, #8]
 8001a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ba4 <HAL_I2C_Master_Transmit+0x218>)
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a48:	8979      	ldrh	r1, [r7, #10]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	6a3a      	ldr	r2, [r7, #32]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fc14 	bl	800227c <I2C_MasterRequestWrite>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00f      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d105      	bne.n	8001a6e <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e093      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e08d      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001a90:	e066      	b.n	8001b60 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	6a39      	ldr	r1, [r7, #32]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fdf9 	bl	800268e <I2C_WaitOnTXEFlagUntilTimeout>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00f      	beq.n	8001ac2 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d109      	bne.n	8001abe <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06b      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e069      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	1c59      	adds	r1, r3, #1
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6251      	str	r1, [r2, #36]	; 0x24
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d119      	bne.n	8001b30 <HAL_I2C_Master_Transmit+0x1a4>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	6251      	str	r1, [r2, #36]	; 0x24
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	6a39      	ldr	r1, [r7, #32]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fde7 	bl	8002708 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00f      	beq.n	8001b60 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d109      	bne.n	8001b5c <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b56:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e01c      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e01a      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d194      	bne.n	8001a92 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	00100002 	.word	0x00100002
 8001ba4:	ffff0000 	.word	0xffff0000

08001ba8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	817b      	strh	r3, [r7, #10]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc0:	f7ff fae0 	bl	8001184 <HAL_GetTick>
 8001bc4:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	f040 821d 	bne.w	800200e <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2319      	movs	r3, #25
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4987      	ldr	r1, [pc, #540]	; (8001dfc <HAL_I2C_Master_Receive+0x254>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fc96 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
 8001bec:	e210      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2C_Master_Receive+0x54>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e209      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d007      	beq.n	8001c22 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2222      	movs	r2, #34	; 0x22
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	893a      	ldrh	r2, [r7, #8]
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a6a      	ldr	r2, [pc, #424]	; (8001e00 <HAL_I2C_Master_Receive+0x258>)
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fb88 	bl	8002380 <I2C_MasterRequestRead>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00f      	beq.n	8001c96 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d105      	bne.n	8001c8a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1c2      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1bc      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d113      	bne.n	8001cc6 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	623b      	str	r3, [r7, #32]
 8001cb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e190      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d11d      	bne.n	8001d0a <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cdc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cde:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d06:	b662      	cpsie	i
 8001d08:	e16e      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d11d      	bne.n	8001d4e <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d22:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d4a:	b662      	cpsie	i
 8001d4c:	e14c      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001d74:	e138      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	f200 80ef 	bhi.w	8001f5e <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d127      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fcf8 	bl	8002782 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e135      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e133      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6918      	ldr	r0, [r3, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	1c59      	adds	r1, r3, #1
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	6251      	str	r1, [r2, #36]	; 0x24
 8001db8:	b2c2      	uxtb	r2, r0
 8001dba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd6:	e107      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d14c      	bne.n	8001e7a <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de6:	2200      	movs	r2, #0
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_I2C_Master_Receive+0x25c>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fb90 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e10a      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e18:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6918      	ldr	r0, [r3, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	1c59      	adds	r1, r3, #1
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	6251      	str	r1, [r2, #36]	; 0x24
 8001e2a:	b2c2      	uxtb	r2, r0
 8001e2c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e48:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6918      	ldr	r0, [r3, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	6251      	str	r1, [r2, #36]	; 0x24
 8001e5a:	b2c2      	uxtb	r2, r0
 8001e5c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e78:	e0b6      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	2200      	movs	r2, #0
 8001e82:	4965      	ldr	r1, [pc, #404]	; (8002018 <HAL_I2C_Master_Receive+0x470>)
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fb43 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0bd      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6918      	ldr	r0, [r3, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c59      	adds	r1, r3, #1
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	6251      	str	r1, [r2, #36]	; 0x24
 8001eb6:	b2c2      	uxtb	r2, r0
 8001eb8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	2200      	movs	r2, #0
 8001edc:	494e      	ldr	r1, [pc, #312]	; (8002018 <HAL_I2C_Master_Receive+0x470>)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fb16 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e090      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6918      	ldr	r0, [r3, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	1c59      	adds	r1, r3, #1
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f0e:	b2c2      	uxtb	r2, r0
 8001f10:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f2c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6918      	ldr	r0, [r3, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	1c59      	adds	r1, r3, #1
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f3e:	b2c2      	uxtb	r2, r0
 8001f40:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f5c:	e044      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fc0d 	bl	8002782 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e04a      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e048      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6918      	ldr	r0, [r3, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c59      	adds	r1, r3, #1
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f8e:	b2c2      	uxtb	r2, r0
 8001f90:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d116      	bne.n	8001fe8 <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6918      	ldr	r0, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	1c59      	adds	r1, r3, #1
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	6251      	str	r1, [r2, #36]	; 0x24
 8001fca:	b2c2      	uxtb	r2, r0
 8001fcc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f aec2 	bne.w	8001d76 <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	00010004 	.word	0x00010004

0800201c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	2301      	movs	r3, #1
 800203e:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff f8a0 	bl	8001184 <HAL_GetTick>
 8002044:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 810b 	bne.w	800226a <HAL_I2C_IsDeviceReady+0x24e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2319      	movs	r3, #25
 800205a:	2201      	movs	r2, #1
 800205c:	4985      	ldr	r1, [pc, #532]	; (8002274 <HAL_I2C_IsDeviceReady+0x258>)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fa56 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	e0fe      	b.n	800226c <HAL_I2C_IsDeviceReady+0x250>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_I2C_IsDeviceReady+0x60>
 8002078:	2302      	movs	r3, #2
 800207a:	e0f7      	b.n	800226c <HAL_I2C_IsDeviceReady+0x250>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d007      	beq.n	80020a2 <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2224      	movs	r2, #36	; 0x24
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a6d      	ldr	r2, [pc, #436]	; (8002278 <HAL_I2C_IsDeviceReady+0x25c>)
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fa14 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0bc      	b.n	800226c <HAL_I2C_IsDeviceReady+0x250>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff f83f 	bl	8001184 <HAL_GetTick>
 8002106:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8002140:	e02a      	b.n	8002198 <HAL_I2C_IsDeviceReady+0x17c>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_I2C_IsDeviceReady+0x13c>
 8002148:	f7ff f81c 	bl	8001184 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d203      	bcs.n	8002160 <HAL_I2C_IsDeviceReady+0x144>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	22a0      	movs	r2, #160	; 0xa0
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002184:	bf0c      	ite	eq
 8002186:	2301      	moveq	r3, #1
 8002188:	2300      	movne	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <HAL_I2C_IsDeviceReady+0x18e>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <HAL_I2C_IsDeviceReady+0x18e>
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2ba0      	cmp	r3, #160	; 0xa0
 80021a8:	d1cb      	bne.n	8002142 <HAL_I2C_IsDeviceReady+0x126>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d129      	bne.n	8002214 <HAL_I2C_IsDeviceReady+0x1f8>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ce:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2319      	movs	r3, #25
 80021ec:	2201      	movs	r2, #1
 80021ee:	4921      	ldr	r1, [pc, #132]	; (8002274 <HAL_I2C_IsDeviceReady+0x258>)
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f98d 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_I2C_IsDeviceReady+0x1e4>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e035      	b.n	800226c <HAL_I2C_IsDeviceReady+0x250>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e02b      	b.n	800226c <HAL_I2C_IsDeviceReady+0x250>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800222c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2319      	movs	r3, #25
 8002234:	2201      	movs	r2, #1
 8002236:	490f      	ldr	r1, [pc, #60]	; (8002274 <HAL_I2C_IsDeviceReady+0x258>)
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f969 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_IsDeviceReady+0x22c>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e011      	b.n	800226c <HAL_I2C_IsDeviceReady+0x250>
        }
      }
    }while(I2C_Trials++ < Trials);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	617a      	str	r2, [r7, #20]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	f63f af38 	bhi.w	80020c6 <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_I2C_IsDeviceReady+0x250>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	4618      	mov	r0, r3
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	00100002 	.word	0x00100002
 8002278:	ffff0000 	.word	0xffff0000

0800227c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	460b      	mov	r3, r1
 800228a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b04      	cmp	r3, #4
 8002296:	d006      	beq.n	80022a6 <I2C_MasterRequestWrite+0x2a>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d003      	beq.n	80022a6 <I2C_MasterRequestWrite+0x2a>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022a4:	d108      	bne.n	80022b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e00b      	b.n	80022d0 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	2b12      	cmp	r3, #18
 80022be:	d107      	bne.n	80022d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ce:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f917 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e041      	b.n	8002370 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f4:	d108      	bne.n	8002308 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	e021      	b.n	800234c <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002308:	897b      	ldrh	r3, [r7, #10]
 800230a:	11db      	asrs	r3, r3, #7
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f003 0306 	and.w	r3, r3, #6
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f063 030f 	orn	r3, r3, #15
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4914      	ldr	r1, [pc, #80]	; (8002378 <I2C_MasterRequestWrite+0xfc>)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f943 	bl	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b04      	cmp	r3, #4
 8002338:	d101      	bne.n	800233e <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e018      	b.n	8002370 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e016      	b.n	8002370 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	490a      	ldr	r1, [pc, #40]	; (800237c <I2C_MasterRequestWrite+0x100>)
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f92d 	bl	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d101      	bne.n	800236a <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e002      	b.n	8002370 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e000      	b.n	8002370 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	00010008 	.word	0x00010008
 800237c:	00010002 	.word	0x00010002

08002380 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d006      	beq.n	80023ba <I2C_MasterRequestRead+0x3a>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d003      	beq.n	80023ba <I2C_MasterRequestRead+0x3a>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b8:	d108      	bne.n	80023cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00b      	b.n	80023e4 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	2b11      	cmp	r3, #17
 80023d2:	d107      	bne.n	80023e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e2:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f88d 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e07f      	b.n	8002500 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002408:	d108      	bne.n	800241c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	e05f      	b.n	80024dc <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	11db      	asrs	r3, r3, #7
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0306 	and.w	r3, r3, #6
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f063 030f 	orn	r3, r3, #15
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4933      	ldr	r1, [pc, #204]	; (8002508 <I2C_MasterRequestRead+0x188>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f8b9 	bl	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b04      	cmp	r3, #4
 800244c:	d101      	bne.n	8002452 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e056      	b.n	8002500 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e054      	b.n	8002500 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4929      	ldr	r1, [pc, #164]	; (800250c <I2C_MasterRequestRead+0x18c>)
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8a3 	bl	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b04      	cmp	r3, #4
 8002478:	d101      	bne.n	800247e <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e040      	b.n	8002500 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e03e      	b.n	8002500 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f82b 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e01d      	b.n	8002500 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024c4:	897b      	ldrh	r3, [r7, #10]
 80024c6:	11db      	asrs	r3, r3, #7
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0306 	and.w	r3, r3, #6
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f063 030e 	orn	r3, r3, #14
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	490a      	ldr	r1, [pc, #40]	; (800250c <I2C_MasterRequestRead+0x18c>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f865 	bl	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d101      	bne.n	80024fa <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e002      	b.n	8002500 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e000      	b.n	8002500 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010008 	.word	0x00010008
 800250c:	00010002 	.word	0x00010002

08002510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002520:	e01f      	b.n	8002562 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d01b      	beq.n	8002562 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002530:	f7fe fe28 	bl	8001184 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d210      	bcs.n	8002562 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e023      	b.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d10d      	bne.n	8002588 <I2C_WaitOnFlagUntilTimeout+0x78>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4013      	ands	r3, r2
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	e00c      	b.n	80025a2 <I2C_WaitOnFlagUntilTimeout+0x92>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4013      	ands	r3, r2
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d0bc      	beq.n	8002522 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c0:	e040      	b.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	d11c      	bne.n	800260c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ea:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2204      	movs	r2, #4
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e03c      	b.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d017      	beq.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800261a:	f7fe fdb3 	bl	8001184 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d20c      	bcs.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e020      	b.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	0c1b      	lsrs	r3, r3, #16
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d10c      	bne.n	8002668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	43da      	mvns	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e00b      	b.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d19e      	bne.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269a:	e029      	b.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f8ba 	bl	8002816 <I2C_IsAcknowledgeFailed>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e029      	b.n	8002700 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d01d      	beq.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ba:	f7fe fd63 	bl	8001184 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d212      	bcs.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e007      	b.n	8002700 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d1ce      	bne.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002714:	e029      	b.n	800276a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f87d 	bl	8002816 <I2C_IsAcknowledgeFailed>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e029      	b.n	800277a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d01d      	beq.n	800276a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002734:	f7fe fd26 	bl	8001184 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	d212      	bcs.n	800276a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e007      	b.n	800277a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b04      	cmp	r3, #4
 8002776:	d1ce      	bne.n	8002716 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800278e:	e036      	b.n	80027fe <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b10      	cmp	r3, #16
 800279c:	d114      	bne.n	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f06f 0210 	mvn.w	r2, #16
 80027a6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e022      	b.n	800280e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80027ce:	f7fe fcd9 	bl	8001184 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20f      	bcs.n	80027fe <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e007      	b.n	800280e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d1c1      	bne.n	8002790 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282c:	d114      	bne.n	8002858 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002836:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2204      	movs	r2, #4
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8087 	beq.w	800298c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800287e:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b04      	cmp	r3, #4
 8002888:	d00c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800288a:	4b8f      	ldr	r3, [pc, #572]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b08      	cmp	r3, #8
 8002894:	d112      	bne.n	80028bc <HAL_RCC_OscConfig+0x58>
 8002896:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d10b      	bne.n	80028bc <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d06c      	beq.n	800298a <HAL_RCC_OscConfig+0x126>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d168      	bne.n	800298a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e22d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d106      	bne.n	80028d4 <HAL_RCC_OscConfig+0x70>
 80028c6:	4b80      	ldr	r3, [pc, #512]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7f      	ldr	r2, [pc, #508]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e02e      	b.n	8002932 <HAL_RCC_OscConfig+0xce>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x92>
 80028dc:	4b7a      	ldr	r3, [pc, #488]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a79      	ldr	r2, [pc, #484]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b77      	ldr	r3, [pc, #476]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a76      	ldr	r2, [pc, #472]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e01d      	b.n	8002932 <HAL_RCC_OscConfig+0xce>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_OscConfig+0xb6>
 8002900:	4b71      	ldr	r3, [pc, #452]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a70      	ldr	r2, [pc, #448]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002906:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b6e      	ldr	r3, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e00b      	b.n	8002932 <HAL_RCC_OscConfig+0xce>
 800291a:	4b6b      	ldr	r3, [pc, #428]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6a      	ldr	r2, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a67      	ldr	r2, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 800292c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d013      	beq.n	8002962 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe fc23 	bl	8001184 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002942:	f7fe fc1f 	bl	8001184 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1e1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002954:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0xde>
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fc0f 	bl	8001184 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296a:	f7fe fc0b 	bl	8001184 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b64      	cmp	r3, #100	; 0x64
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1cd      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297c:	4b52      	ldr	r3, [pc, #328]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x106>
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d063      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029a4:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d11c      	bne.n	80029ea <HAL_RCC_OscConfig+0x186>
 80029b0:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029bc:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x170>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e1a1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4939      	ldr	r1, [pc, #228]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e8:	e03a      	b.n	8002a60 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f2:	4b36      	ldr	r3, [pc, #216]	; (8002acc <HAL_RCC_OscConfig+0x268>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fbc4 	bl	8001184 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fbc0 	bl	8001184 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e182      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4926      	ldr	r1, [pc, #152]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_RCC_OscConfig+0x268>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fba3 	bl	8001184 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fe fb9f 	bl	8001184 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e161      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a54:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d039      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d019      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fb83 	bl	8001184 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a82:	f7fe fb7f 	bl	8001184 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e141      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <HAL_RCC_OscConfig+0x264>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f000 fae3 	bl	800306c <RCC_Delay>
 8002aa6:	e01b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fb69 	bl	8001184 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	e00e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fb65 	bl	8001184 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d907      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e127      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	42420000 	.word	0x42420000
 8002ad0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ea      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a6 	beq.w	8002c3a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b8b      	ldr	r3, [pc, #556]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4a87      	ldr	r2, [pc, #540]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	61d3      	str	r3, [r2, #28]
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <HAL_RCC_OscConfig+0x4c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b26:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x4c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	; (8002d24 <HAL_RCC_OscConfig+0x4c0>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7fe fb27 	bl	8001184 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe fb23 	bl	8001184 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	; 0x64
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0e5      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_OscConfig+0x4c0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x30a>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e02d      	b.n	8002bca <HAL_RCC_OscConfig+0x366>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x32c>
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	e01c      	b.n	8002bca <HAL_RCC_OscConfig+0x366>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x34e>
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a60      	ldr	r2, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	e00b      	b.n	8002bca <HAL_RCC_OscConfig+0x366>
 8002bb2:	4b5b      	ldr	r3, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a5a      	ldr	r2, [pc, #360]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6213      	str	r3, [r2, #32]
 8002bbe:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fad7 	bl	8001184 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fad3 	bl	8001184 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e093      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RCC_OscConfig+0x376>
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fac1 	bl	8001184 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe fabd 	bl	8001184 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e07d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d069      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d061      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d146      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fa92 	bl	8001184 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fa8e 	bl	8001184 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e050      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c76:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d108      	bne.n	8002c9e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4921      	ldr	r1, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a19      	ldr	r1, [r3, #32]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	491b      	ldr	r1, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fa62 	bl	8001184 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fa5e 	bl	8001184 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e020      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x460>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fa4b 	bl	8001184 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe fa47 	bl	8001184 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e009      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_OscConfig+0x4bc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x48e>
 8002d10:	e001      	b.n	8002d16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42420060 	.word	0x42420060

08002d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002d3a:	4b7e      	ldr	r3, [pc, #504]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d910      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d48:	4b7a      	ldr	r3, [pc, #488]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 0207 	bic.w	r2, r3, #7
 8002d50:	4978      	ldr	r1, [pc, #480]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d58:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0e0      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d020      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d82:	4b6d      	ldr	r3, [pc, #436]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a6c      	ldr	r2, [pc, #432]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002d88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d8c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9a:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a66      	ldr	r2, [pc, #408]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002da0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002da4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da6:	4b64      	ldr	r3, [pc, #400]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4961      	ldr	r1, [pc, #388]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d06a      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dcc:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d115      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0a7      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e09b      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e093      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e04:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 0203 	bic.w	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4949      	ldr	r1, [pc, #292]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e16:	f7fe f9b5 	bl	8001184 <HAL_GetTick>
 8002e1a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d112      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e26:	f7fe f9ad 	bl	8001184 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e077      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xfa>
 8002e48:	e027      	b.n	8002e9a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d11d      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f7fe f996 	bl	8001184 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e060      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d1ee      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x128>
 8002e76:	e010      	b.n	8002e9a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fe f984 	bl	8001184 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04e      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ee      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d210      	bcs.n	8002eca <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 0207 	bic.w	r2, r3, #7
 8002eb0:	4920      	ldr	r1, [pc, #128]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <HAL_RCC_ClockConfig+0x208>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e030      	b.n	8002f2c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4915      	ldr	r1, [pc, #84]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d009      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	490d      	ldr	r1, [pc, #52]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f08:	f000 f81c 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RCC_ClockConfig+0x20c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <HAL_RCC_ClockConfig+0x210>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_RCC_ClockConfig+0x214>)
 8002f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fe f8eb 	bl	8001100 <HAL_InitTick>
  
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	0800729c 	.word	0x0800729c
 8002f40:	2000017c 	.word	0x2000017c

08002f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b490      	push	{r4, r7}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f4c:	1d3c      	adds	r4, r7, #4
 8002f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f54:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x40>
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x46>
 8002f82:	e02d      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f86:	623b      	str	r3, [r7, #32]
      break;
 8002f88:	e02d      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	0c9b      	lsrs	r3, r3, #18
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f96:	4413      	add	r3, r2
 8002f98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	0c5b      	lsrs	r3, r3, #17
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fbc:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fc2:	fb02 f203 	mul.w	r2, r2, r3
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	e004      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	623b      	str	r3, [r7, #32]
      break;
 8002fde:	e002      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fe2:	623b      	str	r3, [r7, #32]
      break;
 8002fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3728      	adds	r7, #40	; 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc90      	pop	{r4, r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	08007258 	.word	0x08007258
 8002ff8:	08007268 	.word	0x08007268
 8002ffc:	40021000 	.word	0x40021000
 8003000:	007a1200 	.word	0x007a1200
 8003004:	003d0900 	.word	0x003d0900

08003008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b02      	ldr	r3, [pc, #8]	; (8003018 <HAL_RCC_GetHCLKFreq+0x10>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	2000017c 	.word	0x2000017c

0800301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003020:	f7ff fff2 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003024:	4601      	mov	r1, r0
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4a03      	ldr	r2, [pc, #12]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	080072ac 	.word	0x080072ac

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003048:	f7ff ffde 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 800304c:	4601      	mov	r1, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0adb      	lsrs	r3, r3, #11
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4a03      	ldr	r2, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	080072ac 	.word	0x080072ac

0800306c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <RCC_Delay+0x34>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <RCC_Delay+0x38>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0a5b      	lsrs	r3, r3, #9
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003088:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e5a      	subs	r2, r3, #1
 800308e:	60fa      	str	r2, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f9      	bne.n	8003088 <RCC_Delay+0x1c>
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	2000017c 	.word	0x2000017c
 80030a4:	10624dd3 	.word	0x10624dd3

080030a8 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01d      	b.n	80030f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f003 fc40 	bl	8006954 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f000 fcd8 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	f241 1311 	movw	r3, #4369	; 0x1111
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_TIM_Base_Stop_IT+0x48>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	f240 4344 	movw	r3, #1092	; 0x444
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d107      	bne.n	800317a <HAL_TIM_Base_Stop_IT+0x48>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e01d      	b.n	80031d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f815 	bl	80031dc <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f000 fc69 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2201      	movs	r2, #1
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fef5 	bl	8003ff2 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0b      	ldr	r2, [pc, #44]	; (800323c <HAL_TIM_PWM_Start+0x4c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d107      	bne.n	8003222 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40012c00 	.word	0x40012c00

08003240 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fecd 	bl	8003ff2 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <HAL_TIM_PWM_Stop+0x94>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d117      	bne.n	8003292 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	f241 1311 	movw	r3, #4369	; 0x1111
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <HAL_TIM_PWM_Stop+0x52>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	f240 4344 	movw	r3, #1092	; 0x444
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_TIM_PWM_Stop+0x52>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	f241 1311 	movw	r3, #4369	; 0x1111
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <HAL_TIM_PWM_Stop+0x82>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	f240 4344 	movw	r3, #1092	; 0x444
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_PWM_Stop+0x82>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40012c00 	.word	0x40012c00

080032d8 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e081      	b.n	80033fc <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d106      	bne.n	8003312 <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f003 fb5b 	bl	80069c8 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0207 	bic.w	r2, r2, #7
 8003328:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 fbb1 	bl	8003a9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	4313      	orrs	r3, r2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003380:	f023 030c 	bic.w	r3, r3, #12
 8003384:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800338c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	4313      	orrs	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	011a      	lsls	r2, r3, #4
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	031b      	lsls	r3, r3, #12
 80033b0:	4313      	orrs	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4313      	orrs	r3, r2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_TIM_Encoder_Start+0x16>
 8003414:	2b04      	cmp	r3, #4
 8003416:	d008      	beq.n	800342a <HAL_TIM_Encoder_Start+0x26>
 8003418:	e00f      	b.n	800343a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fde5 	bl	8003ff2 <TIM_CCxChannelCmd>
      break;
 8003428:	e016      	b.n	8003458 <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2201      	movs	r2, #1
 8003430:	2104      	movs	r1, #4
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fddd 	bl	8003ff2 <TIM_CCxChannelCmd>
      break;
 8003438:	e00e      	b.n	8003458 <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fdd5 	bl	8003ff2 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	2104      	movs	r1, #4
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fdce 	bl	8003ff2 <TIM_CCxChannelCmd>
     break;
 8003456:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_TIM_Encoder_Stop+0x16>
 8003482:	2b04      	cmp	r3, #4
 8003484:	d008      	beq.n	8003498 <HAL_TIM_Encoder_Stop+0x26>
 8003486:	e00f      	b.n	80034a8 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fdae 	bl	8003ff2 <TIM_CCxChannelCmd>
      break;
 8003496:	e016      	b.n	80034c6 <HAL_TIM_Encoder_Stop+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2200      	movs	r2, #0
 800349e:	2104      	movs	r1, #4
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fda6 	bl	8003ff2 <TIM_CCxChannelCmd>
      break;
 80034a6:	e00e      	b.n	80034c6 <HAL_TIM_Encoder_Stop+0x54>
  }
    default :
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fd9e 	bl	8003ff2 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2104      	movs	r1, #4
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fd97 	bl	8003ff2 <TIM_CCxChannelCmd>
     break;
 80034c4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_TIM_Encoder_Stop+0x84>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	f240 4344 	movw	r3, #1092	; 0x444
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_Encoder_Stop+0x84>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0202 	mvn.w	r2, #2
 800352c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa8e 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa81 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fa90 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0204 	mvn.w	r2, #4
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa64 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa57 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa66 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0208 	mvn.w	r2, #8
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2204      	movs	r2, #4
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa3a 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa2d 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa3c 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b10      	cmp	r3, #16
 8003610:	d122      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d11b      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0210 	mvn.w	r2, #16
 8003628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2208      	movs	r2, #8
 800362e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa10 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa03 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fa12 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0201 	mvn.w	r2, #1
 800367c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f001 fafa 	bl	8004c78 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fd68 	bl	8004180 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9d6 	bl	8003a88 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0220 	mvn.w	r2, #32
 8003700:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fd33 	bl	800416e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003726:	2302      	movs	r3, #2
 8003728:	e0b4      	b.n	8003894 <HAL_TIM_PWM_ConfigChannel+0x184>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	f200 809f 	bhi.w	8003880 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800377d 	.word	0x0800377d
 800374c:	08003881 	.word	0x08003881
 8003750:	08003881 	.word	0x08003881
 8003754:	08003881 	.word	0x08003881
 8003758:	080037bd 	.word	0x080037bd
 800375c:	08003881 	.word	0x08003881
 8003760:	08003881 	.word	0x08003881
 8003764:	08003881 	.word	0x08003881
 8003768:	080037ff 	.word	0x080037ff
 800376c:	08003881 	.word	0x08003881
 8003770:	08003881 	.word	0x08003881
 8003774:	08003881 	.word	0x08003881
 8003778:	0800383f 	.word	0x0800383f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f9f0 	bl	8003b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0208 	orr.w	r2, r2, #8
 8003796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6999      	ldr	r1, [r3, #24]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	619a      	str	r2, [r3, #24]
    }
    break;
 80037ba:	e062      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fa3c 	bl	8003c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6999      	ldr	r1, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	021a      	lsls	r2, r3, #8
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	619a      	str	r2, [r3, #24]
    }
    break;
 80037fc:	e041      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa8b 	bl	8003d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0208 	orr.w	r2, r2, #8
 8003818:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0204 	bic.w	r2, r2, #4
 8003828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69d9      	ldr	r1, [r3, #28]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	61da      	str	r2, [r3, #28]
    }
    break;
 800383c:	e021      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fadb 	bl	8003e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003858:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	021a      	lsls	r2, r3, #8
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	61da      	str	r2, [r3, #28]
    }
    break;
 800387e:	e000      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8003880:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_TIM_ConfigClockSource+0x1c>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e0c8      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x1ae>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d077      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0x144>
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d80e      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x76>
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	f000 808a 	beq.w	8003a0e <HAL_TIM_ConfigClockSource+0x172>
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d802      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x68>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07e      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8003902:	e099      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003904:	2b20      	cmp	r3, #32
 8003906:	f000 8089 	beq.w	8003a1c <HAL_TIM_ConfigClockSource+0x180>
 800390a:	2b30      	cmp	r3, #48	; 0x30
 800390c:	f000 808d 	beq.w	8003a2a <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8003910:	e092      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003912:	2b70      	cmp	r3, #112	; 0x70
 8003914:	d016      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xa8>
 8003916:	2b70      	cmp	r3, #112	; 0x70
 8003918:	d804      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x88>
 800391a:	2b50      	cmp	r3, #80	; 0x50
 800391c:	d040      	beq.n	80039a0 <HAL_TIM_ConfigClockSource+0x104>
 800391e:	2b60      	cmp	r3, #96	; 0x60
 8003920:	d04e      	beq.n	80039c0 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8003922:	e089      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d003      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x96>
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392e:	d024      	beq.n	800397a <HAL_TIM_ConfigClockSource+0xde>
    break;
 8003930:	e082      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0207 	bic.w	r2, r2, #7
 8003940:	609a      	str	r2, [r3, #8]
    break;
 8003942:	e079      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f000 fb2c 	bl	8003fb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003966:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800396e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]
    break;
 8003978:	e05e      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f000 fb11 	bl	8003fb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399c:	609a      	str	r2, [r3, #8]
    break;
 800399e:	e04b      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	461a      	mov	r2, r3
 80039ae:	f000 fa7b 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2150      	movs	r1, #80	; 0x50
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fada 	bl	8003f72 <TIM_ITRx_SetConfig>
    break;
 80039be:	e03b      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f000 fa9d 	bl	8003f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2160      	movs	r1, #96	; 0x60
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 faca 	bl	8003f72 <TIM_ITRx_SetConfig>
    break;
 80039de:	e02b      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	461a      	mov	r2, r3
 80039ee:	f000 fa5b 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 faba 	bl	8003f72 <TIM_ITRx_SetConfig>
    break;
 80039fe:	e01b      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fab3 	bl	8003f72 <TIM_ITRx_SetConfig>
    break;
 8003a0c:	e014      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2110      	movs	r1, #16
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 faac 	bl	8003f72 <TIM_ITRx_SetConfig>
    break;
 8003a1a:	e00d      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2120      	movs	r1, #32
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 faa5 	bl	8003f72 <TIM_ITRx_SetConfig>
    break;
 8003a28:	e006      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2130      	movs	r1, #48	; 0x30
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fa9e 	bl	8003f72 <TIM_ITRx_SetConfig>
    break;
 8003a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a2a      	ldr	r2, [pc, #168]	; (8003b5c <TIM_Base_SetConfig+0xc0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0x34>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x34>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <TIM_Base_SetConfig+0xc4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x34>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <TIM_Base_SetConfig+0xc8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <TIM_Base_SetConfig+0xc0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x66>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x66>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <TIM_Base_SetConfig+0xc4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x66>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <TIM_Base_SetConfig+0xc8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <TIM_Base_SetConfig+0xc0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800

08003b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f023 0201 	bic.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f023 0302 	bic.w	r3, r3, #2
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <TIM_OC1_SetConfig+0xd4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10c      	bne.n	8003bea <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0308 	bic.w	r3, r3, #8
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <TIM_OC1_SetConfig+0xd4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00

08003c40 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0210 	bic.w	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <TIM_OC2_SetConfig+0xdc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <TIM_OC2_SetConfig+0xdc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d113      	bne.n	8003cf8 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <TIM_OC3_SetConfig+0xdc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10d      	bne.n	8003da6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <TIM_OC3_SetConfig+0xdc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d113      	bne.n	8003dd6 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40012c00 	.word	0x40012c00

08003e00 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e42:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	031b      	lsls	r3, r3, #12
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <TIM_OC4_SetConfig+0xa4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d109      	bne.n	8003e80 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	40012c00 	.word	0x40012c00

08003ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0201 	bic.w	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f023 030a 	bic.w	r3, r3, #10
 8003eec:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f023 0210 	bic.w	r2, r3, #16
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	031b      	lsls	r3, r3, #12
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	621a      	str	r2, [r3, #32]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	f043 0307 	orr.w	r3, r3, #7
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	609a      	str	r2, [r3, #8]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	021a      	lsls	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	609a      	str	r2, [r3, #8]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8004002:	2201      	movs	r2, #1
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	43db      	mvns	r3, r3
 8004014:	401a      	ands	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	431a      	orrs	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800404e:	2302      	movs	r3, #2
 8004050:	e044      	b.n	80040dc <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e032      	b.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800411c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e03f      	b.n	8004224 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f002 fcb9 	bl	8006b30 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2224      	movs	r2, #36	; 0x24
 80041c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fc34 	bl	8004a44 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fa:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b20      	cmp	r3, #32
 800424a:	f040 8083 	bne.w	8004354 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_UART_Transmit+0x2e>
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07b      	b.n	8004356 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_UART_Transmit+0x40>
 8004268:	2302      	movs	r3, #2
 800426a:	e074      	b.n	8004356 <HAL_UART_Transmit+0x12a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2221      	movs	r2, #33	; 0x21
 800427e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004282:	f7fc ff7f 	bl	8001184 <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004294:	e042      	b.n	800431c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ac:	d122      	bne.n	80042f4 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fa59 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e046      	b.n	8004356 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042da:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3302      	adds	r3, #2
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	e017      	b.n	800431c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3301      	adds	r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	e013      	b.n	800431c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2200      	movs	r2, #0
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fa36 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e023      	b.n	8004356 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	60ba      	str	r2, [r7, #8]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1b7      	bne.n	8004296 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2140      	movs	r1, #64	; 0x40
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fa1d 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e00a      	b.n	8004356 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b088      	sub	sp, #32
 8004362:	af02      	add	r7, sp, #8
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b20      	cmp	r3, #32
 800437c:	f040 8090 	bne.w	80044a0 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_UART_Receive+0x2e>
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e088      	b.n	80044a2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_UART_Receive+0x40>
 800439a:	2302      	movs	r3, #2
 800439c:	e081      	b.n	80044a2 <HAL_UART_Receive+0x144>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2222      	movs	r2, #34	; 0x22
 80043b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80043b4:	f7fc fee6 	bl	8001184 <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80043c6:	e05c      	b.n	8004482 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043de:	d12b      	bne.n	8004438 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2200      	movs	r2, #0
 80043e8:	2120      	movs	r1, #32
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f9c0 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e053      	b.n	80044a2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10c      	bne.n	8004420 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	b29a      	uxth	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	3302      	adds	r3, #2
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	e030      	b.n	8004482 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	b29b      	uxth	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	b29a      	uxth	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	3301      	adds	r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	e024      	b.n	8004482 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2200      	movs	r2, #0
 8004440:	2120      	movs	r1, #32
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f994 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e027      	b.n	80044a2 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	60ba      	str	r2, [r7, #8]
 8004466:	b2ca      	uxtb	r2, r1
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e00a      	b.n	8004482 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1c59      	adds	r1, r3, #1
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d19d      	bne.n	80043c8 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e000      	b.n	80044a2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
  }
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	4613      	mov	r3, r2
 80044b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d140      	bne.n	8004546 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_UART_Receive_IT+0x26>
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e039      	b.n	8004548 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Receive_IT+0x38>
 80044de:	2302      	movs	r3, #2
 80044e0:	e032      	b.n	8004548 <HAL_UART_Receive_IT+0x9e>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2222      	movs	r2, #34	; 0x22
 8004506:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0220 	orr.w	r2, r2, #32
 8004540:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
	...

08004554 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_UART_IRQHandler+0x52>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9ce 	bl	8004940 <UART_Receive_IT>
      return;
 80045a4:	e0cc      	b.n	8004740 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80ab 	beq.w	8004704 <HAL_UART_IRQHandler+0x1b0>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <HAL_UART_IRQHandler+0x70>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80a0 	beq.w	8004704 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_UART_IRQHandler+0x90>
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_UART_IRQHandler+0xb0>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	f043 0202 	orr.w	r2, r3, #2
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_UART_IRQHandler+0xd0>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_UART_IRQHandler+0xf0>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	f043 0208 	orr.w	r2, r3, #8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d078      	beq.n	800473e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_UART_IRQHandler+0x112>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f96d 	bl	8004940 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <HAL_UART_IRQHandler+0x13a>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d031      	beq.n	80046f2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8b8 	bl	8004804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d023      	beq.n	80046ea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d013      	beq.n	80046e2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <HAL_UART_IRQHandler+0x1f4>)
 80046c0:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fc fe70 	bl	80013ac <HAL_DMA_Abort_IT>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046dc:	4610      	mov	r0, r2
 80046de:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	e00e      	b.n	8004700 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f83b 	bl	800475e <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	e00a      	b.n	8004700 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f837 	bl	800475e <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e006      	b.n	8004700 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f833 	bl	800475e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80046fe:	e01e      	b.n	800473e <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	bf00      	nop
    return;
 8004702:	e01c      	b.n	800473e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_UART_IRQHandler+0x1cc>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8a4 	bl	8004866 <UART_Transmit_IT>
    return;
 800471e:	e00f      	b.n	8004740 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_UART_IRQHandler+0x1ec>
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8eb 	bl	8004910 <UART_EndTransmit_IT>
    return;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_UART_IRQHandler+0x1ec>
    return;
 800473e:	bf00      	nop
  }
}
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	0800483f 	.word	0x0800483f

0800474c <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004780:	e02c      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d028      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004790:	f7fc fcf8 	bl	8001184 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	429a      	cmp	r2, r3
 800479e:	d21d      	bcs.n	80047dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e00f      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d0c3      	beq.n	8004782 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800481a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr

0800483e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff ff80 	bl	800475e <HAL_UART_ErrorCallback>
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b21      	cmp	r3, #33	; 0x21
 8004878:	d144      	bne.n	8004904 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004882:	d11a      	bne.n	80048ba <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004898:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	1c9a      	adds	r2, r3, #2
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	621a      	str	r2, [r3, #32]
 80048ac:	e00e      	b.n	80048cc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	621a      	str	r2, [r3, #32]
 80048b8:	e008      	b.n	80048cc <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6211      	str	r1, [r2, #32]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4619      	mov	r1, r3
 80048da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10f      	bne.n	8004900 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004926:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff ff0b 	bl	800474c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b22      	cmp	r3, #34	; 0x22
 8004952:	d171      	bne.n	8004a38 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	d123      	bne.n	80049a6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10e      	bne.n	800498a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	1c9a      	adds	r2, r3, #2
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
 8004988:	e029      	b.n	80049de <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	b29b      	uxth	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
 80049a4:	e01b      	b.n	80049de <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6858      	ldr	r0, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	1c59      	adds	r1, r3, #1
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6291      	str	r1, [r2, #40]	; 0x28
 80049be:	b2c2      	uxtb	r2, r0
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e00c      	b.n	80049de <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	1c58      	adds	r0, r3, #1
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	6288      	str	r0, [r1, #40]	; 0x28
 80049d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4619      	mov	r1, r3
 80049ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d120      	bne.n	8004a34 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0220 	bic.w	r2, r2, #32
 8004a00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a10:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fc8c 	bl	8005348 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e002      	b.n	8004a3a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e000      	b.n	8004a3a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a86:	f023 030c 	bic.w	r3, r3, #12
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6f      	ldr	r2, [pc, #444]	; (8004c6c <UART_SetConfig+0x228>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d16b      	bne.n	8004b8c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004ab4:	f7fe fac6 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009a      	lsls	r2, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	4a68      	ldr	r2, [pc, #416]	; (8004c70 <UART_SetConfig+0x22c>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	011c      	lsls	r4, r3, #4
 8004ad8:	f7fe fab4 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009a      	lsls	r2, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	fbb2 f5f3 	udiv	r5, r2, r3
 8004af2:	f7fe faa7 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	4a58      	ldr	r2, [pc, #352]	; (8004c70 <UART_SetConfig+0x22c>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2264      	movs	r2, #100	; 0x64
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	1aeb      	subs	r3, r5, r3
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	3332      	adds	r3, #50	; 0x32
 8004b20:	4a53      	ldr	r2, [pc, #332]	; (8004c70 <UART_SetConfig+0x22c>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2c:	441c      	add	r4, r3
 8004b2e:	f7fe fa89 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009a      	lsls	r2, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b48:	f7fe fa7c 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009a      	lsls	r2, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	4a43      	ldr	r2, [pc, #268]	; (8004c70 <UART_SetConfig+0x22c>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	2264      	movs	r2, #100	; 0x64
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	1aeb      	subs	r3, r5, r3
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	3332      	adds	r3, #50	; 0x32
 8004b76:	4a3e      	ldr	r2, [pc, #248]	; (8004c70 <UART_SetConfig+0x22c>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4422      	add	r2, r4
 8004b88:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004b8a:	e06a      	b.n	8004c62 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b8c:	f7fe fa46 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009a      	lsls	r2, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	4a32      	ldr	r2, [pc, #200]	; (8004c70 <UART_SetConfig+0x22c>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	011c      	lsls	r4, r3, #4
 8004bb0:	f7fe fa34 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009a      	lsls	r2, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bca:	f7fe fa27 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009a      	lsls	r2, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	4a22      	ldr	r2, [pc, #136]	; (8004c70 <UART_SetConfig+0x22c>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2264      	movs	r2, #100	; 0x64
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	1aeb      	subs	r3, r5, r3
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	3332      	adds	r3, #50	; 0x32
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <UART_SetConfig+0x22c>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c04:	441c      	add	r4, r3
 8004c06:	f7fe fa09 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009a      	lsls	r2, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c20:	f7fe f9fc 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009a      	lsls	r2, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <UART_SetConfig+0x22c>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2264      	movs	r2, #100	; 0x64
 8004c44:	fb02 f303 	mul.w	r3, r2, r3
 8004c48:	1aeb      	subs	r3, r5, r3
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	3332      	adds	r3, #50	; 0x32
 8004c4e:	4a08      	ldr	r2, [pc, #32]	; (8004c70 <UART_SetConfig+0x22c>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 020f 	and.w	r2, r3, #15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4422      	add	r2, r4
 8004c60:	609a      	str	r2, [r3, #8]
}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bdb0      	pop	{r4, r5, r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40013800 	.word	0x40013800
 8004c70:	51eb851f 	.word	0x51eb851f
 8004c74:	00000000 	.word	0x00000000

08004c78 <HAL_TIM_PeriodElapsedCallback>:
volatile uint16_t x = 0;
volatile uint8_t dem = 0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b5b0      	push	{r4, r5, r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	6078      	str	r0, [r7, #4]
	if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_UPDATE))
 8004c80:	4b79      	ldr	r3, [pc, #484]	; (8004e68 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	f040 8213 	bne.w	80050b6 <HAL_TIM_PeriodElapsedCallback+0x43e>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);*/


		 //init mpu
		  result = SD_MPU6050_Init(&hi2c2,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 8004c90:	2300      	movs	r3, #0
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	2200      	movs	r2, #0
 8004c98:	4974      	ldr	r1, [pc, #464]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004c9a:	4875      	ldr	r0, [pc, #468]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004c9c:	f000 ff2e 	bl	8005afc <SD_MPU6050_Init>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b73      	ldr	r3, [pc, #460]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004ca6:	701a      	strb	r2, [r3, #0]

		  	  //read all sensors
		  		SD_MPU6050_ReadAll(&hi2c2,&mpu1);
 8004ca8:	4970      	ldr	r1, [pc, #448]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004caa:	4871      	ldr	r0, [pc, #452]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004cac:	f001 f938 	bl	8005f20 <SD_MPU6050_ReadAll>
		  		//read gyro
		  //	  SD_MPU6050_ReadGyroscope(&hi2c2,&mpu1);
		  	  int16_t g_x = mpu1.Gyroscope_X;
 8004cb0:	4b6e      	ldr	r3, [pc, #440]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004cb2:	8a5b      	ldrh	r3, [r3, #18]
 8004cb4:	82bb      	strh	r3, [r7, #20]
		  	  int16_t g_y = mpu1.Gyroscope_Y;
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004cb8:	8a9b      	ldrh	r3, [r3, #20]
 8004cba:	827b      	strh	r3, [r7, #18]
		  	  int16_t g_z = mpu1.Gyroscope_Z;
 8004cbc:	4b6b      	ldr	r3, [pc, #428]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004cbe:	8adb      	ldrh	r3, [r3, #22]
 8004cc0:	823b      	strh	r3, [r7, #16]
	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
		  	  //read accel
		//		SD_MPU6050_ReadAccelerometer(&hi2c2,&mpu1);
			  int16_t a_x = mpu1.Accelerometer_X;
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004cc4:	899b      	ldrh	r3, [r3, #12]
 8004cc6:	81fb      	strh	r3, [r7, #14]
			  int16_t a_y = mpu1.Accelerometer_Y;
 8004cc8:	4b68      	ldr	r3, [pc, #416]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004cca:	89db      	ldrh	r3, [r3, #14]
 8004ccc:	81bb      	strh	r3, [r7, #12]
			  int16_t a_z = mpu1.Accelerometer_Z;
 8004cce:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004cd0:	8a1b      	ldrh	r3, [r3, #16]
 8004cd2:	817b      	strh	r3, [r7, #10]

			  //cal gyro
				rotx = (float)(g_x - bias_rotx)/131;
 8004cd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fb ffc1 	bl	8000c60 <__aeabi_i2f>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fb ff04 	bl	8000af4 <__aeabi_fsub>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4963      	ldr	r1, [pc, #396]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fc f8bd 	bl	8000e70 <__aeabi_fdiv>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004cfc:	601a      	str	r2, [r3, #0]
				roty = (float)(g_y - bias_roty)/131;
 8004cfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fb ffac 	bl	8000c60 <__aeabi_i2f>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7fb feef 	bl	8000af4 <__aeabi_fsub>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4958      	ldr	r1, [pc, #352]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fc f8a8 	bl	8000e70 <__aeabi_fdiv>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004d26:	601a      	str	r2, [r3, #0]
				rotz = (float)(g_z - bias_rotz)/131;
 8004d28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb ff97 	bl	8000c60 <__aeabi_i2f>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b55      	ldr	r3, [pc, #340]	; (8004e8c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fb feda 	bl	8000af4 <__aeabi_fsub>
 8004d40:	4603      	mov	r3, r0
 8004d42:	494e      	ldr	r1, [pc, #312]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fc f893 	bl	8000e70 <__aeabi_fdiv>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8004d50:	601a      	str	r2, [r3, #0]
				//cal accel
				gForcex = (float)a_x/16384 - bias_gForcex;
 8004d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fb ff82 	bl	8000c60 <__aeabi_i2f>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fc f884 	bl	8000e70 <__aeabi_fdiv>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b49      	ldr	r3, [pc, #292]	; (8004e94 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7fb febe 	bl	8000af4 <__aeabi_fsub>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b46      	ldr	r3, [pc, #280]	; (8004e98 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004d7e:	601a      	str	r2, [r3, #0]
				gForcey = (float)a_y/16384 - bias_gForcey;
 8004d80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb ff6b 	bl	8000c60 <__aeabi_i2f>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fc f86d 	bl	8000e70 <__aeabi_fdiv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4b40      	ldr	r3, [pc, #256]	; (8004e9c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fb fea7 	bl	8000af4 <__aeabi_fsub>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8004dac:	601a      	str	r2, [r3, #0]
				gForcez = (float)a_z/16384 - bias_gForcez;
 8004dae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fb ff54 	bl	8000c60 <__aeabi_i2f>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc f856 	bl	8000e70 <__aeabi_fdiv>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f7fb fe90 	bl	8000af4 <__aeabi_fsub>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004dda:	601a      	str	r2, [r3, #0]


				//cal rol and pitch
				 accel  = (float)atan2((double)gForcey,(double)gForcez)*57.29577951;
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb fb19 	bl	8000418 <__aeabi_f2d>
 8004de6:	4604      	mov	r4, r0
 8004de8:	460d      	mov	r5, r1
 8004dea:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fb fb12 	bl	8000418 <__aeabi_f2d>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f001 ffae 	bl	8006d5c <atan2>
 8004e00:	4603      	mov	r3, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	4618      	mov	r0, r3
 8004e06:	4621      	mov	r1, r4
 8004e08:	f7fb fe20 	bl	8000a4c <__aeabi_d2f>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fb fb02 	bl	8000418 <__aeabi_f2d>
 8004e14:	a312      	add	r3, pc, #72	; (adr r3, 8004e60 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fb55 	bl	80004c8 <__aeabi_dmul>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	4618      	mov	r0, r3
 8004e24:	4621      	mov	r1, r4
 8004e26:	f7fb fe11 	bl	8000a4c <__aeabi_d2f>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004e2e:	601a      	str	r2, [r3, #0]
				 if (accel< 0) accel += 179;
 8004e30:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fc f903 	bl	8001044 <__aeabi_fcmplt>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d037      	beq.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8004e44:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4919      	ldr	r1, [pc, #100]	; (8004eb0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb fe54 	bl	8000af8 <__addsf3>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	4b15      	ldr	r3, [pc, #84]	; (8004eac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e036      	b.n	8004ec8 <HAL_TIM_PeriodElapsedCallback+0x250>
 8004e5a:	bf00      	nop
 8004e5c:	f3af 8000 	nop.w
 8004e60:	1a5d2372 	.word	0x1a5d2372
 8004e64:	404ca5dc 	.word	0x404ca5dc
 8004e68:	20000224 	.word	0x20000224
 8004e6c:	200003f4 	.word	0x200003f4
 8004e70:	20000264 	.word	0x20000264
 8004e74:	2000034b 	.word	0x2000034b
 8004e78:	200001fc 	.word	0x200001fc
 8004e7c:	43030000 	.word	0x43030000
 8004e80:	200001f0 	.word	0x200001f0
 8004e84:	20000200 	.word	0x20000200
 8004e88:	200001f4 	.word	0x200001f4
 8004e8c:	20000204 	.word	0x20000204
 8004e90:	200001f8 	.word	0x200001f8
 8004e94:	200001d8 	.word	0x200001d8
 8004e98:	200001cc 	.word	0x200001cc
 8004e9c:	200001dc 	.word	0x200001dc
 8004ea0:	200001d0 	.word	0x200001d0
 8004ea4:	200001e0 	.word	0x200001e0
 8004ea8:	200001d4 	.word	0x200001d4
 8004eac:	200001ac 	.word	0x200001ac
 8004eb0:	43330000 	.word	0x43330000
				 else accel -=179;
 8004eb4:	4b86      	ldr	r3, [pc, #536]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4986      	ldr	r1, [pc, #536]	; (80050d4 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fe1a 	bl	8000af4 <__aeabi_fsub>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b82      	ldr	r3, [pc, #520]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8004ec6:	601a      	str	r2, [r3, #0]
				 gyro  = roll + rotx*dt;
 8004ec8:	4b83      	ldr	r3, [pc, #524]	; (80050d8 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b83      	ldr	r3, [pc, #524]	; (80050dc <HAL_TIM_PeriodElapsedCallback+0x464>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f7fb ff18 	bl	8000d08 <__aeabi_fmul>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b80      	ldr	r3, [pc, #512]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f7fb fe08 	bl	8000af8 <__addsf3>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	4b7d      	ldr	r3, [pc, #500]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8004eee:	601a      	str	r2, [r3, #0]
				 roll = 0.962*gyro + 0.038* accel;
 8004ef0:	4b7c      	ldr	r3, [pc, #496]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fb fa8f 	bl	8000418 <__aeabi_f2d>
 8004efa:	a371      	add	r3, pc, #452	; (adr r3, 80050c0 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb fae2 	bl	80004c8 <__aeabi_dmul>
 8004f04:	4603      	mov	r3, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	4625      	mov	r5, r4
 8004f0a:	461c      	mov	r4, r3
 8004f0c:	4b70      	ldr	r3, [pc, #448]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb fa81 	bl	8000418 <__aeabi_f2d>
 8004f16:	a36c      	add	r3, pc, #432	; (adr r3, 80050c8 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb fad4 	bl	80004c8 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4620      	mov	r0, r4
 8004f26:	4629      	mov	r1, r5
 8004f28:	f7fb f918 	bl	800015c <__adddf3>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4618      	mov	r0, r3
 8004f32:	4621      	mov	r1, r4
 8004f34:	f7fb fd8a 	bl	8000a4c <__aeabi_d2f>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4b69      	ldr	r3, [pc, #420]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004f3c:	601a      	str	r2, [r3, #0]




	//roll range: -40 -> 40, duty: 40 -> 85
	synchrocount = roll*1000/40.0;
 8004f3e:	4b68      	ldr	r3, [pc, #416]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4969      	ldr	r1, [pc, #420]	; (80050e8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb fedf 	bl	8000d08 <__aeabi_fmul>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4967      	ldr	r1, [pc, #412]	; (80050ec <HAL_TIM_PeriodElapsedCallback+0x474>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fb ff8e 	bl	8000e70 <__aeabi_fdiv>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b65      	ldr	r3, [pc, #404]	; (80050f0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8004f5a:	601a      	str	r2, [r3, #0]
	synchroduty  =PID(set, synchrocount, kpangle, kiangle, kdangle);
 8004f5c:	4b65      	ldr	r3, [pc, #404]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	4b64      	ldr	r3, [pc, #400]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b64      	ldr	r3, [pc, #400]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0x484>)
 8004f6a:	681c      	ldr	r4, [r3, #0]
 8004f6c:	4b64      	ldr	r3, [pc, #400]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	4623      	mov	r3, r4
 8004f74:	f000 f8da 	bl	800512c <PID>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b62      	ldr	r3, [pc, #392]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8004f7c:	601a      	str	r2, [r3, #0]
	duty = (int16_t)(synchroduty*75/1000.0);
 8004f7e:	4b61      	ldr	r3, [pc, #388]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4961      	ldr	r1, [pc, #388]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fb febf 	bl	8000d08 <__aeabi_fmul>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fb fa43 	bl	8000418 <__aeabi_f2d>
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	4b5d      	ldr	r3, [pc, #372]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8004f98:	f7fb fbc0 	bl	800071c <__aeabi_ddiv>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	f7fb fd2a 	bl	80009fc <__aeabi_d2iz>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	b21a      	sxth	r2, r3
 8004fac:	4b58      	ldr	r3, [pc, #352]	; (8005110 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8004fae:	801a      	strh	r2, [r3, #0]

	uint8_t temp = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75fb      	strb	r3, [r7, #23]
	 if (roll <0)
 8004fb4:	4b4a      	ldr	r3, [pc, #296]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fc f841 	bl	8001044 <__aeabi_fcmplt>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d018      	beq.n	8004ffa <HAL_TIM_PeriodElapsedCallback+0x382>
	 {
		HAL_UART_Transmit(&huart2, "-", 1, 1000);
 8004fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4951      	ldr	r1, [pc, #324]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8004fd0:	4851      	ldr	r0, [pc, #324]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8004fd2:	f7ff f92b 	bl	800422c <HAL_UART_Transmit>
		while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 8004fd6:	bf00      	nop
 8004fd8:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d1f8      	bne.n	8004fd8 <HAL_TIM_PeriodElapsedCallback+0x360>
		temp = (uint8_t)(-roll);
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fc f850 	bl	8001094 <__aeabi_f2uiz>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	75fb      	strb	r3, [r7, #23]
 8004ff8:	e006      	b.n	8005008 <HAL_TIM_PeriodElapsedCallback+0x390>
	 }
	 else
	 {
		 temp = (uint8_t)(roll);
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc f848 	bl	8001094 <__aeabi_f2uiz>
 8005004:	4603      	mov	r3, r0
 8005006:	75fb      	strb	r3, [r7, #23]
	 }
	 cache[0] = (temp/100) +48;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	4a44      	ldr	r2, [pc, #272]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	b2db      	uxtb	r3, r3
 8005014:	3330      	adds	r3, #48	; 0x30
 8005016:	b2da      	uxtb	r2, r3
 8005018:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800501a:	701a      	strb	r2, [r3, #0]
	 cache[1] = (temp- (cache[0]-48)*100)/10 +48 ;
 800501c:	7dfa      	ldrb	r2, [r7, #23]
 800501e:	4b40      	ldr	r3, [pc, #256]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	3b30      	subs	r3, #48	; 0x30
 8005024:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	4413      	add	r3, r2
 800502e:	4a3d      	ldr	r2, [pc, #244]	; (8005124 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8005030:	fb82 1203 	smull	r1, r2, r2, r3
 8005034:	1092      	asrs	r2, r2, #2
 8005036:	17db      	asrs	r3, r3, #31
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	b2db      	uxtb	r3, r3
 800503c:	3330      	adds	r3, #48	; 0x30
 800503e:	b2da      	uxtb	r2, r3
 8005040:	4b37      	ldr	r3, [pc, #220]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8005042:	705a      	strb	r2, [r3, #1]
	 cache[2] = ((temp - (cache[0]-48)*100 - (cache[1]-48)*10))+48;
 8005044:	4b36      	ldr	r3, [pc, #216]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	0092      	lsls	r2, r2, #2
 800504c:	441a      	add	r2, r3
 800504e:	00d2      	lsls	r2, r2, #3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	b2da      	uxtb	r2, r3
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	4413      	add	r3, r2
 800505a:	b2da      	uxtb	r2, r3
 800505c:	4b30      	ldr	r3, [pc, #192]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	4619      	mov	r1, r3
 8005062:	0149      	lsls	r1, r1, #5
 8005064:	1ac9      	subs	r1, r1, r3
 8005066:	0089      	lsls	r1, r1, #2
 8005068:	1acb      	subs	r3, r1, r3
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	4413      	add	r3, r2
 8005070:	b2db      	uxtb	r3, r3
 8005072:	3b30      	subs	r3, #48	; 0x30
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8005078:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, cache, sizeof(cache), 1000);
 800507a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800507e:	2203      	movs	r2, #3
 8005080:	4927      	ldr	r1, [pc, #156]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8005082:	4825      	ldr	r0, [pc, #148]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8005084:	f7ff f8d2 	bl	800422c <HAL_UART_Transmit>
	while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 8005088:	bf00      	nop
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d1f8      	bne.n	800508a <HAL_TIM_PeriodElapsedCallback+0x412>
	HAL_UART_Transmit(&huart2, "\n", 1, 1000);
 8005098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800509c:	2201      	movs	r2, #1
 800509e:	4922      	ldr	r1, [pc, #136]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80050a0:	481d      	ldr	r0, [pc, #116]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80050a2:	f7ff f8c3 	bl	800422c <HAL_UART_Transmit>
	while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 80050a6:	bf00      	nop
 80050a8:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d1f8      	bne.n	80050a8 <HAL_TIM_PeriodElapsedCallback+0x430>
		break;
	}*/

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);		//tin hieu debug
	}
}
 80050b6:	bf00      	nop
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bdb0      	pop	{r4, r5, r7, pc}
 80050be:	bf00      	nop
 80050c0:	39581062 	.word	0x39581062
 80050c4:	3feec8b4 	.word	0x3feec8b4
 80050c8:	6a7ef9db 	.word	0x6a7ef9db
 80050cc:	3fa374bc 	.word	0x3fa374bc
 80050d0:	200001ac 	.word	0x200001ac
 80050d4:	43330000 	.word	0x43330000
 80050d8:	200001f0 	.word	0x200001f0
 80050dc:	20000018 	.word	0x20000018
 80050e0:	20000208 	.word	0x20000208
 80050e4:	200001b0 	.word	0x200001b0
 80050e8:	447a0000 	.word	0x447a0000
 80050ec:	42200000 	.word	0x42200000
 80050f0:	200001a0 	.word	0x200001a0
 80050f4:	200001a8 	.word	0x200001a8
 80050f8:	2000000c 	.word	0x2000000c
 80050fc:	20000010 	.word	0x20000010
 8005100:	20000014 	.word	0x20000014
 8005104:	200001a4 	.word	0x200001a4
 8005108:	42960000 	.word	0x42960000
 800510c:	408f4000 	.word	0x408f4000
 8005110:	200001bc 	.word	0x200001bc
 8005114:	0800726c 	.word	0x0800726c
 8005118:	2000038c 	.word	0x2000038c
 800511c:	51eb851f 	.word	0x51eb851f
 8005120:	20000348 	.word	0x20000348
 8005124:	66666667 	.word	0x66666667
 8005128:	08007270 	.word	0x08007270

0800512c <PID>:

float PID(float setpoint, float measure, float kp, float ki, float kd)
{
 800512c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
	static volatile float e0 = 0;
	static volatile float e1 = 0;
	static volatile float e2 = 0;
	static volatile float u0 = 0;
	static volatile float u1 = 0;
	e2 = e1;
 800513a:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <PID+0x138>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a4a      	ldr	r2, [pc, #296]	; (8005268 <PID+0x13c>)
 8005140:	6013      	str	r3, [r2, #0]
	e1 = e0;
 8005142:	4b4a      	ldr	r3, [pc, #296]	; (800526c <PID+0x140>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a47      	ldr	r2, [pc, #284]	; (8005264 <PID+0x138>)
 8005148:	6013      	str	r3, [r2, #0]
	e0 = setpoint - measure;
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7fb fcd1 	bl	8000af4 <__aeabi_fsub>
 8005152:	4603      	mov	r3, r0
 8005154:	461a      	mov	r2, r3
 8005156:	4b45      	ldr	r3, [pc, #276]	; (800526c <PID+0x140>)
 8005158:	601a      	str	r2, [r3, #0]
	u1 = u0;
 800515a:	4b45      	ldr	r3, [pc, #276]	; (8005270 <PID+0x144>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a45      	ldr	r2, [pc, #276]	; (8005274 <PID+0x148>)
 8005160:	6013      	str	r3, [r2, #0]
	u0 = (u1 + kp*(e0 - e1) + ki*time*(e0 + e1)/2.0 + kd*(e0 - 2*e1 + e2)/time);
 8005162:	4b42      	ldr	r3, [pc, #264]	; (800526c <PID+0x140>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b3f      	ldr	r3, [pc, #252]	; (8005264 <PID+0x138>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f7fb fcc1 	bl	8000af4 <__aeabi_fsub>
 8005172:	4603      	mov	r3, r0
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fb fdc6 	bl	8000d08 <__aeabi_fmul>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <PID+0x148>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7fb fcb6 	bl	8000af8 <__addsf3>
 800518c:	4603      	mov	r3, r0
 800518e:	4618      	mov	r0, r3
 8005190:	f7fb f942 	bl	8000418 <__aeabi_f2d>
 8005194:	4604      	mov	r4, r0
 8005196:	460d      	mov	r5, r1
 8005198:	4b37      	ldr	r3, [pc, #220]	; (8005278 <PID+0x14c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb fdb2 	bl	8000d08 <__aeabi_fmul>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461e      	mov	r6, r3
 80051a8:	4b30      	ldr	r3, [pc, #192]	; (800526c <PID+0x140>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <PID+0x138>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7fb fca0 	bl	8000af8 <__addsf3>
 80051b8:	4603      	mov	r3, r0
 80051ba:	4619      	mov	r1, r3
 80051bc:	4630      	mov	r0, r6
 80051be:	f7fb fda3 	bl	8000d08 <__aeabi_fmul>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb f927 	bl	8000418 <__aeabi_f2d>
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051d2:	f7fb faa3 	bl	800071c <__aeabi_ddiv>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4620      	mov	r0, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	f7fa ffbd 	bl	800015c <__adddf3>
 80051e2:	4603      	mov	r3, r0
 80051e4:	460c      	mov	r4, r1
 80051e6:	461d      	mov	r5, r3
 80051e8:	4626      	mov	r6, r4
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <PID+0x140>)
 80051ec:	681c      	ldr	r4, [r3, #0]
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <PID+0x138>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb fc7f 	bl	8000af8 <__addsf3>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4619      	mov	r1, r3
 80051fe:	4620      	mov	r0, r4
 8005200:	f7fb fc78 	bl	8000af4 <__aeabi_fsub>
 8005204:	4603      	mov	r3, r0
 8005206:	461a      	mov	r2, r3
 8005208:	4b17      	ldr	r3, [pc, #92]	; (8005268 <PID+0x13c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7fb fc72 	bl	8000af8 <__addsf3>
 8005214:	4603      	mov	r3, r0
 8005216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005218:	4618      	mov	r0, r3
 800521a:	f7fb fd75 	bl	8000d08 <__aeabi_fmul>
 800521e:	4603      	mov	r3, r0
 8005220:	461a      	mov	r2, r3
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <PID+0x14c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f7fb fe21 	bl	8000e70 <__aeabi_fdiv>
 800522e:	4603      	mov	r3, r0
 8005230:	4618      	mov	r0, r3
 8005232:	f7fb f8f1 	bl	8000418 <__aeabi_f2d>
 8005236:	4603      	mov	r3, r0
 8005238:	460c      	mov	r4, r1
 800523a:	461a      	mov	r2, r3
 800523c:	4623      	mov	r3, r4
 800523e:	4628      	mov	r0, r5
 8005240:	4631      	mov	r1, r6
 8005242:	f7fa ff8b 	bl	800015c <__adddf3>
 8005246:	4603      	mov	r3, r0
 8005248:	460c      	mov	r4, r1
 800524a:	4618      	mov	r0, r3
 800524c:	4621      	mov	r1, r4
 800524e:	f7fb fbfd 	bl	8000a4c <__aeabi_d2f>
 8005252:	4602      	mov	r2, r0
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <PID+0x144>)
 8005256:	601a      	str	r2, [r3, #0]
	//if (u0 < 0 ) u0 = 0;
	//if (u0>1500 ) u0 =1500;
	return u0;
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <PID+0x144>)
 800525a:	681b      	ldr	r3, [r3, #0]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005264:	2000020c 	.word	0x2000020c
 8005268:	20000210 	.word	0x20000210
 800526c:	20000214 	.word	0x20000214
 8005270:	20000218 	.word	0x20000218
 8005274:	2000021c 	.word	0x2000021c
 8005278:	20000008 	.word	0x20000008

0800527c <OutputPWM>:
#include "PWM.h"

extern TIM_HandleTypeDef htim1;

void OutputPWM (int16_t dutycycle)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	80fb      	strh	r3, [r7, #6]
	int16_t dutycyclex = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	81fb      	strh	r3, [r7, #14]
	dutycyclex = -dutycycle;
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	425b      	negs	r3, r3
 800528e:	b29b      	uxth	r3, r3
 8005290:	81fb      	strh	r3, [r7, #14]
	if (dutycycle<0)
 8005292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005296:	2b00      	cmp	r3, #0
 8005298:	da25      	bge.n	80052e6 <OutputPWM+0x6a>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800529a:	2201      	movs	r2, #1
 800529c:	2120      	movs	r1, #32
 800529e:	4826      	ldr	r0, [pc, #152]	; (8005338 <OutputPWM+0xbc>)
 80052a0:	f7fc fa58 	bl	8001754 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80052a4:	2200      	movs	r2, #0
 80052a6:	2110      	movs	r1, #16
 80052a8:	4823      	ldr	r0, [pc, #140]	; (8005338 <OutputPWM+0xbc>)
 80052aa:	f7fc fa53 	bl	8001754 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80052ae:	2201      	movs	r2, #1
 80052b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052b4:	4821      	ldr	r0, [pc, #132]	; (800533c <OutputPWM+0xc0>)
 80052b6:	f7fc fa4d 	bl	8001754 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2108      	movs	r1, #8
 80052be:	481e      	ldr	r0, [pc, #120]	; (8005338 <OutputPWM+0xbc>)
 80052c0:	f7fc fa48 	bl	8001754 <HAL_GPIO_WritePin>
			  dutycyclex = dutycyclex +35;
 80052c4:	89fb      	ldrh	r3, [r7, #14]
 80052c6:	3323      	adds	r3, #35	; 0x23
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	81fb      	strh	r3, [r7, #14]
		  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycyclex);
 80052cc:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <OutputPWM+0xc4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80052d4:	635a      	str	r2, [r3, #52]	; 0x34
		  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, dutycyclex);
 80052d6:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <OutputPWM+0xc4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3334      	adds	r3, #52	; 0x34
 80052dc:	3304      	adds	r3, #4
 80052de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80052e2:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
			  dutycycle = dutycycle +35;
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle);
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, dutycycle);
		  }
}
 80052e4:	e024      	b.n	8005330 <OutputPWM+0xb4>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80052e6:	2200      	movs	r2, #0
 80052e8:	2120      	movs	r1, #32
 80052ea:	4813      	ldr	r0, [pc, #76]	; (8005338 <OutputPWM+0xbc>)
 80052ec:	f7fc fa32 	bl	8001754 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80052f0:	2201      	movs	r2, #1
 80052f2:	2110      	movs	r1, #16
 80052f4:	4810      	ldr	r0, [pc, #64]	; (8005338 <OutputPWM+0xbc>)
 80052f6:	f7fc fa2d 	bl	8001754 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80052fa:	2200      	movs	r2, #0
 80052fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005300:	480e      	ldr	r0, [pc, #56]	; (800533c <OutputPWM+0xc0>)
 8005302:	f7fc fa27 	bl	8001754 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8005306:	2201      	movs	r2, #1
 8005308:	2108      	movs	r1, #8
 800530a:	480b      	ldr	r0, [pc, #44]	; (8005338 <OutputPWM+0xbc>)
 800530c:	f7fc fa22 	bl	8001754 <HAL_GPIO_WritePin>
			  dutycycle = dutycycle +35;
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	3323      	adds	r3, #35	; 0x23
 8005314:	b29b      	uxth	r3, r3
 8005316:	80fb      	strh	r3, [r7, #6]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle);
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <OutputPWM+0xc4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005320:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, dutycycle);
 8005322:	4b07      	ldr	r3, [pc, #28]	; (8005340 <OutputPWM+0xc4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3334      	adds	r3, #52	; 0x34
 8005328:	3304      	adds	r3, #4
 800532a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800532e:	601a      	str	r2, [r3, #0]
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40010c00 	.word	0x40010c00
 800533c:	40010800 	.word	0x40010800
 8005340:	20000308 	.word	0x20000308
 8005344:	00000000 	.word	0x00000000

08005348 <HAL_UART_RxCpltCallback>:
extern uint8_t mode;
extern volatile uint16_t x;
extern uint8_t choose ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	//if (__HAL_UART_GET_IT_SOURCE(&huart2,UART_IT_RXNE))
	{
		HAL_UART_Transmit(&huart2, &rxbuff, 1, 1000);
 8005350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005354:	2201      	movs	r2, #1
 8005356:	49ae      	ldr	r1, [pc, #696]	; (8005610 <HAL_UART_RxCpltCallback+0x2c8>)
 8005358:	48ae      	ldr	r0, [pc, #696]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 800535a:	f7fe ff67 	bl	800422c <HAL_UART_Transmit>
		while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 800535e:	bf00      	nop
 8005360:	4bac      	ldr	r3, [pc, #688]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d1f8      	bne.n	8005360 <HAL_UART_RxCpltCallback+0x18>

		//Bat dau Debug
		if ((rxbuff == 'b') && (status == 0))
 800536e:	4ba8      	ldr	r3, [pc, #672]	; (8005610 <HAL_UART_RxCpltCallback+0x2c8>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b62      	cmp	r3, #98	; 0x62
 8005374:	d13e      	bne.n	80053f4 <HAL_UART_RxCpltCallback+0xac>
 8005376:	4ba8      	ldr	r3, [pc, #672]	; (8005618 <HAL_UART_RxCpltCallback+0x2d0>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d139      	bne.n	80053f4 <HAL_UART_RxCpltCallback+0xac>
		{
			count = 0;
 8005380:	4ba6      	ldr	r3, [pc, #664]	; (800561c <HAL_UART_RxCpltCallback+0x2d4>)
 8005382:	2200      	movs	r2, #0
 8005384:	801a      	strh	r2, [r3, #0]
			synchrocount = 0;
 8005386:	4ba6      	ldr	r3, [pc, #664]	; (8005620 <HAL_UART_RxCpltCallback+0x2d8>)
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
			synchroduty = 0;
 800538e:	4ba5      	ldr	r3, [pc, #660]	; (8005624 <HAL_UART_RxCpltCallback+0x2dc>)
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
			duty = 0;
 8005396:	4ba4      	ldr	r3, [pc, #656]	; (8005628 <HAL_UART_RxCpltCallback+0x2e0>)
 8005398:	2200      	movs	r2, #0
 800539a:	801a      	strh	r2, [r3, #0]
			set = 0;
 800539c:	4ba3      	ldr	r3, [pc, #652]	; (800562c <HAL_UART_RxCpltCallback+0x2e4>)
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
			x = 0;
 80053a4:	4ba2      	ldr	r3, [pc, #648]	; (8005630 <HAL_UART_RxCpltCallback+0x2e8>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	801a      	strh	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim4);
 80053aa:	48a2      	ldr	r0, [pc, #648]	; (8005634 <HAL_UART_RxCpltCallback+0x2ec>)
 80053ac:	f7fd fea7 	bl	80030fe <HAL_TIM_Base_Start_IT>
			HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80053b0:	2100      	movs	r1, #0
 80053b2:	48a1      	ldr	r0, [pc, #644]	; (8005638 <HAL_UART_RxCpltCallback+0x2f0>)
 80053b4:	f7fe f826 	bl	8003404 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80053b8:	2100      	movs	r1, #0
 80053ba:	48a0      	ldr	r0, [pc, #640]	; (800563c <HAL_UART_RxCpltCallback+0x2f4>)
 80053bc:	f7fe f822 	bl	8003404 <HAL_TIM_Encoder_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80053c0:	2100      	movs	r1, #0
 80053c2:	489f      	ldr	r0, [pc, #636]	; (8005640 <HAL_UART_RxCpltCallback+0x2f8>)
 80053c4:	f7fd ff14 	bl	80031f0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80053c8:	2104      	movs	r1, #4
 80053ca:	489d      	ldr	r0, [pc, #628]	; (8005640 <HAL_UART_RxCpltCallback+0x2f8>)
 80053cc:	f7fd ff10 	bl	80031f0 <HAL_TIM_PWM_Start>

			HAL_UART_Transmit(&huart2, txbuff[0], sizeof(txbuff[0]), 1000);
 80053d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053d4:	2232      	movs	r2, #50	; 0x32
 80053d6:	499b      	ldr	r1, [pc, #620]	; (8005644 <HAL_UART_RxCpltCallback+0x2fc>)
 80053d8:	488e      	ldr	r0, [pc, #568]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 80053da:	f7fe ff27 	bl	800422c <HAL_UART_Transmit>
			while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 80053de:	bf00      	nop
 80053e0:	4b8c      	ldr	r3, [pc, #560]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d1f8      	bne.n	80053e0 <HAL_UART_RxCpltCallback+0x98>
			status = 1;
 80053ee:	4b8a      	ldr	r3, [pc, #552]	; (8005618 <HAL_UART_RxCpltCallback+0x2d0>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
		}

		//Ket thuc debug
		if ((rxbuff == 's') && (status == 1))
 80053f4:	4b86      	ldr	r3, [pc, #536]	; (8005610 <HAL_UART_RxCpltCallback+0x2c8>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b73      	cmp	r3, #115	; 0x73
 80053fa:	d13d      	bne.n	8005478 <HAL_UART_RxCpltCallback+0x130>
 80053fc:	4b86      	ldr	r3, [pc, #536]	; (8005618 <HAL_UART_RxCpltCallback+0x2d0>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	d138      	bne.n	8005478 <HAL_UART_RxCpltCallback+0x130>
		{
			HAL_TIM_Base_Stop_IT(&htim4);
 8005406:	488b      	ldr	r0, [pc, #556]	; (8005634 <HAL_UART_RxCpltCallback+0x2ec>)
 8005408:	f7fd fe93 	bl	8003132 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_1);
 800540c:	2100      	movs	r1, #0
 800540e:	488a      	ldr	r0, [pc, #552]	; (8005638 <HAL_UART_RxCpltCallback+0x2f0>)
 8005410:	f7fe f82f 	bl	8003472 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_1);
 8005414:	2100      	movs	r1, #0
 8005416:	4889      	ldr	r0, [pc, #548]	; (800563c <HAL_UART_RxCpltCallback+0x2f4>)
 8005418:	f7fe f82b 	bl	8003472 <HAL_TIM_Encoder_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800541c:	2100      	movs	r1, #0
 800541e:	4888      	ldr	r0, [pc, #544]	; (8005640 <HAL_UART_RxCpltCallback+0x2f8>)
 8005420:	f7fd ff0e 	bl	8003240 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8005424:	2104      	movs	r1, #4
 8005426:	4886      	ldr	r0, [pc, #536]	; (8005640 <HAL_UART_RxCpltCallback+0x2f8>)
 8005428:	f7fd ff0a 	bl	8003240 <HAL_TIM_PWM_Stop>

			HAL_UART_Transmit(&huart2, txbuff[1], sizeof(txbuff[1]), 1000);
 800542c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005430:	2232      	movs	r2, #50	; 0x32
 8005432:	4985      	ldr	r1, [pc, #532]	; (8005648 <HAL_UART_RxCpltCallback+0x300>)
 8005434:	4877      	ldr	r0, [pc, #476]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 8005436:	f7fe fef9 	bl	800422c <HAL_UART_Transmit>
			while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 800543a:	bf00      	nop
 800543c:	4b75      	ldr	r3, [pc, #468]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d1f8      	bne.n	800543c <HAL_UART_RxCpltCallback+0xf4>
			status = 0;
 800544a:	4b73      	ldr	r3, [pc, #460]	; (8005618 <HAL_UART_RxCpltCallback+0x2d0>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]

			count = 0;
 8005450:	4b72      	ldr	r3, [pc, #456]	; (800561c <HAL_UART_RxCpltCallback+0x2d4>)
 8005452:	2200      	movs	r2, #0
 8005454:	801a      	strh	r2, [r3, #0]
			synchrocount = 0;
 8005456:	4b72      	ldr	r3, [pc, #456]	; (8005620 <HAL_UART_RxCpltCallback+0x2d8>)
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
			synchroduty = 0;
 800545e:	4b71      	ldr	r3, [pc, #452]	; (8005624 <HAL_UART_RxCpltCallback+0x2dc>)
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
			duty = 0;
 8005466:	4b70      	ldr	r3, [pc, #448]	; (8005628 <HAL_UART_RxCpltCallback+0x2e0>)
 8005468:	2200      	movs	r2, #0
 800546a:	801a      	strh	r2, [r3, #0]
			set = 1000;
 800546c:	4b6f      	ldr	r3, [pc, #444]	; (800562c <HAL_UART_RxCpltCallback+0x2e4>)
 800546e:	4a77      	ldr	r2, [pc, #476]	; (800564c <HAL_UART_RxCpltCallback+0x304>)
 8005470:	601a      	str	r2, [r3, #0]
			x = 0;
 8005472:	4b6f      	ldr	r3, [pc, #444]	; (8005630 <HAL_UART_RxCpltCallback+0x2e8>)
 8005474:	2200      	movs	r2, #0
 8005476:	801a      	strh	r2, [r3, #0]
		}

		//Nhap Kp
		if ((rxbuff == 'p') && (status == 0))
 8005478:	4b65      	ldr	r3, [pc, #404]	; (8005610 <HAL_UART_RxCpltCallback+0x2c8>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b70      	cmp	r3, #112	; 0x70
 800547e:	f040 811d 	bne.w	80056bc <HAL_UART_RxCpltCallback+0x374>
 8005482:	4b65      	ldr	r3, [pc, #404]	; (8005618 <HAL_UART_RxCpltCallback+0x2d0>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	f040 8117 	bne.w	80056bc <HAL_UART_RxCpltCallback+0x374>
		{
			HAL_UART_Transmit(&huart2, txbuff[2], sizeof(txbuff[2]), 1000);
 800548e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005492:	2232      	movs	r2, #50	; 0x32
 8005494:	496e      	ldr	r1, [pc, #440]	; (8005650 <HAL_UART_RxCpltCallback+0x308>)
 8005496:	485f      	ldr	r0, [pc, #380]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 8005498:	f7fe fec8 	bl	800422c <HAL_UART_Transmit>
			while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 800549c:	bf00      	nop
 800549e:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d1f8      	bne.n	800549e <HAL_UART_RxCpltCallback+0x156>
			uint8_t i = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	77fb      	strb	r3, [r7, #31]
			uint8_t j = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	77bb      	strb	r3, [r7, #30]
			float dec = 0;
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	61bb      	str	r3, [r7, #24]
			do
			{
				while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE));
 80054ba:	bf00      	nop
 80054bc:	4b55      	ldr	r3, [pc, #340]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d1f8      	bne.n	80054bc <HAL_UART_RxCpltCallback+0x174>
				HAL_UART_Receive(&huart2, rxbuffs+i, 1, 1000);
 80054ca:	7ffb      	ldrb	r3, [r7, #31]
 80054cc:	4a61      	ldr	r2, [pc, #388]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 80054ce:	1899      	adds	r1, r3, r2
 80054d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054d4:	2201      	movs	r2, #1
 80054d6:	484f      	ldr	r0, [pc, #316]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 80054d8:	f7fe ff41 	bl	800435e <HAL_UART_Receive>
				HAL_UART_Transmit(&huart2, rxbuffs+i, 1, 1000);
 80054dc:	7ffb      	ldrb	r3, [r7, #31]
 80054de:	4a5d      	ldr	r2, [pc, #372]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 80054e0:	1899      	adds	r1, r3, r2
 80054e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054e6:	2201      	movs	r2, #1
 80054e8:	484a      	ldr	r0, [pc, #296]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 80054ea:	f7fe fe9f 	bl	800422c <HAL_UART_Transmit>
				while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 80054ee:	bf00      	nop
 80054f0:	4b48      	ldr	r3, [pc, #288]	; (8005614 <HAL_UART_RxCpltCallback+0x2cc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d1f8      	bne.n	80054f0 <HAL_UART_RxCpltCallback+0x1a8>
				if (rxbuffs[i] == '.')
 80054fe:	7ffb      	ldrb	r3, [r7, #31]
 8005500:	4a54      	ldr	r2, [pc, #336]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	2b2e      	cmp	r3, #46	; 0x2e
 8005506:	d12a      	bne.n	800555e <HAL_UART_RxCpltCallback+0x216>
				{
					k = rxbuffs[0]-48;
 8005508:	4b52      	ldr	r3, [pc, #328]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	3b30      	subs	r3, #48	; 0x30
 800550e:	4618      	mov	r0, r3
 8005510:	f7fb fba6 	bl	8000c60 <__aeabi_i2f>
 8005514:	4602      	mov	r2, r0
 8005516:	4b50      	ldr	r3, [pc, #320]	; (8005658 <HAL_UART_RxCpltCallback+0x310>)
 8005518:	601a      	str	r2, [r3, #0]
					for (j = 1;j<i ; j++)
 800551a:	2301      	movs	r3, #1
 800551c:	77bb      	strb	r3, [r7, #30]
 800551e:	e01a      	b.n	8005556 <HAL_UART_RxCpltCallback+0x20e>
						k = k*10 + (rxbuffs[j]-48);
 8005520:	4b4d      	ldr	r3, [pc, #308]	; (8005658 <HAL_UART_RxCpltCallback+0x310>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	494d      	ldr	r1, [pc, #308]	; (800565c <HAL_UART_RxCpltCallback+0x314>)
 8005526:	4618      	mov	r0, r3
 8005528:	f7fb fbee 	bl	8000d08 <__aeabi_fmul>
 800552c:	4603      	mov	r3, r0
 800552e:	461c      	mov	r4, r3
 8005530:	7fbb      	ldrb	r3, [r7, #30]
 8005532:	4a48      	ldr	r2, [pc, #288]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 8005534:	5cd3      	ldrb	r3, [r2, r3]
 8005536:	3b30      	subs	r3, #48	; 0x30
 8005538:	4618      	mov	r0, r3
 800553a:	f7fb fb91 	bl	8000c60 <__aeabi_i2f>
 800553e:	4603      	mov	r3, r0
 8005540:	4619      	mov	r1, r3
 8005542:	4620      	mov	r0, r4
 8005544:	f7fb fad8 	bl	8000af8 <__addsf3>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
 800554c:	4b42      	ldr	r3, [pc, #264]	; (8005658 <HAL_UART_RxCpltCallback+0x310>)
 800554e:	601a      	str	r2, [r3, #0]
					for (j = 1;j<i ; j++)
 8005550:	7fbb      	ldrb	r3, [r7, #30]
 8005552:	3301      	adds	r3, #1
 8005554:	77bb      	strb	r3, [r7, #30]
 8005556:	7fba      	ldrb	r2, [r7, #30]
 8005558:	7ffb      	ldrb	r3, [r7, #31]
 800555a:	429a      	cmp	r2, r3
 800555c:	d3e0      	bcc.n	8005520 <HAL_UART_RxCpltCallback+0x1d8>
					//j = i+1;
				}
			} while (rxbuffs[i++] != '\n');
 800555e:	7ffb      	ldrb	r3, [r7, #31]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	77fa      	strb	r2, [r7, #31]
 8005564:	461a      	mov	r2, r3
 8005566:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 8005568:	5c9b      	ldrb	r3, [r3, r2]
 800556a:	2b0a      	cmp	r3, #10
 800556c:	d1a5      	bne.n	80054ba <HAL_UART_RxCpltCallback+0x172>
			if (j)
 800556e:	7fbb      	ldrb	r3, [r7, #30]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d03c      	beq.n	80055ee <HAL_UART_RxCpltCallback+0x2a6>
			{
				for (i=i-3;i>j;i--)
 8005574:	7ffb      	ldrb	r3, [r7, #31]
 8005576:	3b03      	subs	r3, #3
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e023      	b.n	80055c4 <HAL_UART_RxCpltCallback+0x27c>
					dec = dec*0.1 + (rxbuffs[i]-48);
 800557c:	69b8      	ldr	r0, [r7, #24]
 800557e:	f7fa ff4b 	bl	8000418 <__aeabi_f2d>
 8005582:	a321      	add	r3, pc, #132	; (adr r3, 8005608 <HAL_UART_RxCpltCallback+0x2c0>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fa ff9e 	bl	80004c8 <__aeabi_dmul>
 800558c:	4603      	mov	r3, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4625      	mov	r5, r4
 8005592:	461c      	mov	r4, r3
 8005594:	7ffb      	ldrb	r3, [r7, #31]
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 8005598:	5cd3      	ldrb	r3, [r2, r3]
 800559a:	3b30      	subs	r3, #48	; 0x30
 800559c:	4618      	mov	r0, r3
 800559e:	f7fa ff29 	bl	80003f4 <__aeabi_i2d>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4620      	mov	r0, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	f7fa fdd7 	bl	800015c <__adddf3>
 80055ae:	4603      	mov	r3, r0
 80055b0:	460c      	mov	r4, r1
 80055b2:	4618      	mov	r0, r3
 80055b4:	4621      	mov	r1, r4
 80055b6:	f7fb fa49 	bl	8000a4c <__aeabi_d2f>
 80055ba:	4603      	mov	r3, r0
 80055bc:	61bb      	str	r3, [r7, #24]
				for (i=i-3;i>j;i--)
 80055be:	7ffb      	ldrb	r3, [r7, #31]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	7ffa      	ldrb	r2, [r7, #31]
 80055c6:	7fbb      	ldrb	r3, [r7, #30]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d8d7      	bhi.n	800557c <HAL_UART_RxCpltCallback+0x234>
				dec = dec*0.1;
 80055cc:	69b8      	ldr	r0, [r7, #24]
 80055ce:	f7fa ff23 	bl	8000418 <__aeabi_f2d>
 80055d2:	a30d      	add	r3, pc, #52	; (adr r3, 8005608 <HAL_UART_RxCpltCallback+0x2c0>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fa ff76 	bl	80004c8 <__aeabi_dmul>
 80055dc:	4603      	mov	r3, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	4618      	mov	r0, r3
 80055e2:	4621      	mov	r1, r4
 80055e4:	f7fb fa32 	bl	8000a4c <__aeabi_d2f>
 80055e8:	4603      	mov	r3, r0
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e058      	b.n	80056a0 <HAL_UART_RxCpltCallback+0x358>
			}
			else
			{
				k = rxbuffs[0]-48;
 80055ee:	4b19      	ldr	r3, [pc, #100]	; (8005654 <HAL_UART_RxCpltCallback+0x30c>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	3b30      	subs	r3, #48	; 0x30
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb fb33 	bl	8000c60 <__aeabi_i2f>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b16      	ldr	r3, [pc, #88]	; (8005658 <HAL_UART_RxCpltCallback+0x310>)
 80055fe:	601a      	str	r2, [r3, #0]
				for (j = 1;j<i-2 ; j++)
 8005600:	2301      	movs	r3, #1
 8005602:	77bb      	strb	r3, [r7, #30]
 8005604:	e047      	b.n	8005696 <HAL_UART_RxCpltCallback+0x34e>
 8005606:	bf00      	nop
 8005608:	9999999a 	.word	0x9999999a
 800560c:	3fb99999 	.word	0x3fb99999
 8005610:	200001be 	.word	0x200001be
 8005614:	2000038c 	.word	0x2000038c
 8005618:	200001b6 	.word	0x200001b6
 800561c:	2000019c 	.word	0x2000019c
 8005620:	200001a0 	.word	0x200001a0
 8005624:	200001a4 	.word	0x200001a4
 8005628:	200001bc 	.word	0x200001bc
 800562c:	200001a8 	.word	0x200001a8
 8005630:	200001b4 	.word	0x200001b4
 8005634:	20000224 	.word	0x20000224
 8005638:	2000034c 	.word	0x2000034c
 800563c:	200002b8 	.word	0x200002b8
 8005640:	20000308 	.word	0x20000308
 8005644:	2000001c 	.word	0x2000001c
 8005648:	2000004e 	.word	0x2000004e
 800564c:	447a0000 	.word	0x447a0000
 8005650:	20000080 	.word	0x20000080
 8005654:	200002f8 	.word	0x200002f8
 8005658:	200001b8 	.word	0x200001b8
 800565c:	41200000 	.word	0x41200000
				k = k*10 + (rxbuffs[j]-48);
 8005660:	4b7d      	ldr	r3, [pc, #500]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	497d      	ldr	r1, [pc, #500]	; (800585c <HAL_UART_RxCpltCallback+0x514>)
 8005666:	4618      	mov	r0, r3
 8005668:	f7fb fb4e 	bl	8000d08 <__aeabi_fmul>
 800566c:	4603      	mov	r3, r0
 800566e:	461c      	mov	r4, r3
 8005670:	7fbb      	ldrb	r3, [r7, #30]
 8005672:	4a7b      	ldr	r2, [pc, #492]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 8005674:	5cd3      	ldrb	r3, [r2, r3]
 8005676:	3b30      	subs	r3, #48	; 0x30
 8005678:	4618      	mov	r0, r3
 800567a:	f7fb faf1 	bl	8000c60 <__aeabi_i2f>
 800567e:	4603      	mov	r3, r0
 8005680:	4619      	mov	r1, r3
 8005682:	4620      	mov	r0, r4
 8005684:	f7fb fa38 	bl	8000af8 <__addsf3>
 8005688:	4603      	mov	r3, r0
 800568a:	461a      	mov	r2, r3
 800568c:	4b72      	ldr	r3, [pc, #456]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 800568e:	601a      	str	r2, [r3, #0]
				for (j = 1;j<i-2 ; j++)
 8005690:	7fbb      	ldrb	r3, [r7, #30]
 8005692:	3301      	adds	r3, #1
 8005694:	77bb      	strb	r3, [r7, #30]
 8005696:	7fba      	ldrb	r2, [r7, #30]
 8005698:	7ffb      	ldrb	r3, [r7, #31]
 800569a:	3b02      	subs	r3, #2
 800569c:	429a      	cmp	r2, r3
 800569e:	dbdf      	blt.n	8005660 <HAL_UART_RxCpltCallback+0x318>
			}
			k+=dec;
 80056a0:	4b6d      	ldr	r3, [pc, #436]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69b9      	ldr	r1, [r7, #24]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb fa26 	bl	8000af8 <__addsf3>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b69      	ldr	r3, [pc, #420]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 80056b2:	601a      	str	r2, [r3, #0]
			kpangle = k;
 80056b4:	4b68      	ldr	r3, [pc, #416]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a6a      	ldr	r2, [pc, #424]	; (8005864 <HAL_UART_RxCpltCallback+0x51c>)
 80056ba:	6013      	str	r3, [r2, #0]
		}

		//Nhap Ki
		if ((rxbuff == 'i') && (status == 0))
 80056bc:	4b6a      	ldr	r3, [pc, #424]	; (8005868 <HAL_UART_RxCpltCallback+0x520>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b69      	cmp	r3, #105	; 0x69
 80056c2:	f040 8107 	bne.w	80058d4 <HAL_UART_RxCpltCallback+0x58c>
 80056c6:	4b69      	ldr	r3, [pc, #420]	; (800586c <HAL_UART_RxCpltCallback+0x524>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 8101 	bne.w	80058d4 <HAL_UART_RxCpltCallback+0x58c>
		{
			HAL_UART_Transmit(&huart2, txbuff[3], sizeof(txbuff[3]), 1000);
 80056d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056d6:	2232      	movs	r2, #50	; 0x32
 80056d8:	4965      	ldr	r1, [pc, #404]	; (8005870 <HAL_UART_RxCpltCallback+0x528>)
 80056da:	4866      	ldr	r0, [pc, #408]	; (8005874 <HAL_UART_RxCpltCallback+0x52c>)
 80056dc:	f7fe fda6 	bl	800422c <HAL_UART_Transmit>
			while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 80056e0:	bf00      	nop
 80056e2:	4b64      	ldr	r3, [pc, #400]	; (8005874 <HAL_UART_RxCpltCallback+0x52c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d1f8      	bne.n	80056e2 <HAL_UART_RxCpltCallback+0x39a>
			uint8_t i = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	75fb      	strb	r3, [r7, #23]
			uint8_t j = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	75bb      	strb	r3, [r7, #22]
			float dec = 0;
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
			do
			{
				while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE));
 80056fe:	bf00      	nop
 8005700:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <HAL_UART_RxCpltCallback+0x52c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d1f8      	bne.n	8005700 <HAL_UART_RxCpltCallback+0x3b8>
				HAL_UART_Receive(&huart2, rxbuffs+i, 1, 1000);
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	4a53      	ldr	r2, [pc, #332]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 8005712:	1899      	adds	r1, r3, r2
 8005714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005718:	2201      	movs	r2, #1
 800571a:	4856      	ldr	r0, [pc, #344]	; (8005874 <HAL_UART_RxCpltCallback+0x52c>)
 800571c:	f7fe fe1f 	bl	800435e <HAL_UART_Receive>
				HAL_UART_Transmit(&huart2, rxbuffs+i, 1, 1000);
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	4a4f      	ldr	r2, [pc, #316]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 8005724:	1899      	adds	r1, r3, r2
 8005726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800572a:	2201      	movs	r2, #1
 800572c:	4851      	ldr	r0, [pc, #324]	; (8005874 <HAL_UART_RxCpltCallback+0x52c>)
 800572e:	f7fe fd7d 	bl	800422c <HAL_UART_Transmit>
				while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 8005732:	bf00      	nop
 8005734:	4b4f      	ldr	r3, [pc, #316]	; (8005874 <HAL_UART_RxCpltCallback+0x52c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d1f8      	bne.n	8005734 <HAL_UART_RxCpltCallback+0x3ec>
				if (rxbuffs[i] == '.')
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	4a46      	ldr	r2, [pc, #280]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 8005746:	5cd3      	ldrb	r3, [r2, r3]
 8005748:	2b2e      	cmp	r3, #46	; 0x2e
 800574a:	d12a      	bne.n	80057a2 <HAL_UART_RxCpltCallback+0x45a>
				{
					k = rxbuffs[0]-48;
 800574c:	4b44      	ldr	r3, [pc, #272]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	3b30      	subs	r3, #48	; 0x30
 8005752:	4618      	mov	r0, r3
 8005754:	f7fb fa84 	bl	8000c60 <__aeabi_i2f>
 8005758:	4602      	mov	r2, r0
 800575a:	4b3f      	ldr	r3, [pc, #252]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 800575c:	601a      	str	r2, [r3, #0]
					for (j = 1;j<i ; j++)
 800575e:	2301      	movs	r3, #1
 8005760:	75bb      	strb	r3, [r7, #22]
 8005762:	e01a      	b.n	800579a <HAL_UART_RxCpltCallback+0x452>
						k = k*10 + (rxbuffs[j]-48);
 8005764:	4b3c      	ldr	r3, [pc, #240]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	493c      	ldr	r1, [pc, #240]	; (800585c <HAL_UART_RxCpltCallback+0x514>)
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb facc 	bl	8000d08 <__aeabi_fmul>
 8005770:	4603      	mov	r3, r0
 8005772:	461c      	mov	r4, r3
 8005774:	7dbb      	ldrb	r3, [r7, #22]
 8005776:	4a3a      	ldr	r2, [pc, #232]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 8005778:	5cd3      	ldrb	r3, [r2, r3]
 800577a:	3b30      	subs	r3, #48	; 0x30
 800577c:	4618      	mov	r0, r3
 800577e:	f7fb fa6f 	bl	8000c60 <__aeabi_i2f>
 8005782:	4603      	mov	r3, r0
 8005784:	4619      	mov	r1, r3
 8005786:	4620      	mov	r0, r4
 8005788:	f7fb f9b6 	bl	8000af8 <__addsf3>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	4b31      	ldr	r3, [pc, #196]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 8005792:	601a      	str	r2, [r3, #0]
					for (j = 1;j<i ; j++)
 8005794:	7dbb      	ldrb	r3, [r7, #22]
 8005796:	3301      	adds	r3, #1
 8005798:	75bb      	strb	r3, [r7, #22]
 800579a:	7dba      	ldrb	r2, [r7, #22]
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d3e0      	bcc.n	8005764 <HAL_UART_RxCpltCallback+0x41c>
					//j = i+1;
				}
			} while (rxbuffs[i++] != '\n');
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	75fa      	strb	r2, [r7, #23]
 80057a8:	461a      	mov	r2, r3
 80057aa:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 80057ac:	5c9b      	ldrb	r3, [r3, r2]
 80057ae:	2b0a      	cmp	r3, #10
 80057b0:	d1a5      	bne.n	80056fe <HAL_UART_RxCpltCallback+0x3b6>
			if (j)
 80057b2:	7dbb      	ldrb	r3, [r7, #22]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03c      	beq.n	8005832 <HAL_UART_RxCpltCallback+0x4ea>
			{
				for (i=i-3;i>j;i--)
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	3b03      	subs	r3, #3
 80057bc:	75fb      	strb	r3, [r7, #23]
 80057be:	e023      	b.n	8005808 <HAL_UART_RxCpltCallback+0x4c0>
					dec = dec*0.1 + (rxbuffs[i]-48);
 80057c0:	6938      	ldr	r0, [r7, #16]
 80057c2:	f7fa fe29 	bl	8000418 <__aeabi_f2d>
 80057c6:	a322      	add	r3, pc, #136	; (adr r3, 8005850 <HAL_UART_RxCpltCallback+0x508>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa fe7c 	bl	80004c8 <__aeabi_dmul>
 80057d0:	4603      	mov	r3, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4625      	mov	r5, r4
 80057d6:	461c      	mov	r4, r3
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	4a21      	ldr	r2, [pc, #132]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 80057dc:	5cd3      	ldrb	r3, [r2, r3]
 80057de:	3b30      	subs	r3, #48	; 0x30
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fa fe07 	bl	80003f4 <__aeabi_i2d>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7fa fcb5 	bl	800015c <__adddf3>
 80057f2:	4603      	mov	r3, r0
 80057f4:	460c      	mov	r4, r1
 80057f6:	4618      	mov	r0, r3
 80057f8:	4621      	mov	r1, r4
 80057fa:	f7fb f927 	bl	8000a4c <__aeabi_d2f>
 80057fe:	4603      	mov	r3, r0
 8005800:	613b      	str	r3, [r7, #16]
				for (i=i-3;i>j;i--)
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	3b01      	subs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
 8005808:	7dfa      	ldrb	r2, [r7, #23]
 800580a:	7dbb      	ldrb	r3, [r7, #22]
 800580c:	429a      	cmp	r2, r3
 800580e:	d8d7      	bhi.n	80057c0 <HAL_UART_RxCpltCallback+0x478>
				dec = dec*0.1;
 8005810:	6938      	ldr	r0, [r7, #16]
 8005812:	f7fa fe01 	bl	8000418 <__aeabi_f2d>
 8005816:	a30e      	add	r3, pc, #56	; (adr r3, 8005850 <HAL_UART_RxCpltCallback+0x508>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f7fa fe54 	bl	80004c8 <__aeabi_dmul>
 8005820:	4603      	mov	r3, r0
 8005822:	460c      	mov	r4, r1
 8005824:	4618      	mov	r0, r3
 8005826:	4621      	mov	r1, r4
 8005828:	f7fb f910 	bl	8000a4c <__aeabi_d2f>
 800582c:	4603      	mov	r3, r0
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	e042      	b.n	80058b8 <HAL_UART_RxCpltCallback+0x570>
			}
			else
			{
				k = rxbuffs[0]-48;
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_UART_RxCpltCallback+0x518>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	3b30      	subs	r3, #48	; 0x30
 8005838:	4618      	mov	r0, r3
 800583a:	f7fb fa11 	bl	8000c60 <__aeabi_i2f>
 800583e:	4602      	mov	r2, r0
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_UART_RxCpltCallback+0x510>)
 8005842:	601a      	str	r2, [r3, #0]
				for (j = 1;j<i-2 ; j++)
 8005844:	2301      	movs	r3, #1
 8005846:	75bb      	strb	r3, [r7, #22]
 8005848:	e031      	b.n	80058ae <HAL_UART_RxCpltCallback+0x566>
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w
 8005850:	9999999a 	.word	0x9999999a
 8005854:	3fb99999 	.word	0x3fb99999
 8005858:	200001b8 	.word	0x200001b8
 800585c:	41200000 	.word	0x41200000
 8005860:	200002f8 	.word	0x200002f8
 8005864:	2000000c 	.word	0x2000000c
 8005868:	200001be 	.word	0x200001be
 800586c:	200001b6 	.word	0x200001b6
 8005870:	200000b2 	.word	0x200000b2
 8005874:	2000038c 	.word	0x2000038c
				k = k*10 + (rxbuffs[j]-48);
 8005878:	4b97      	ldr	r3, [pc, #604]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4997      	ldr	r1, [pc, #604]	; (8005adc <HAL_UART_RxCpltCallback+0x794>)
 800587e:	4618      	mov	r0, r3
 8005880:	f7fb fa42 	bl	8000d08 <__aeabi_fmul>
 8005884:	4603      	mov	r3, r0
 8005886:	461c      	mov	r4, r3
 8005888:	7dbb      	ldrb	r3, [r7, #22]
 800588a:	4a95      	ldr	r2, [pc, #596]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 800588c:	5cd3      	ldrb	r3, [r2, r3]
 800588e:	3b30      	subs	r3, #48	; 0x30
 8005890:	4618      	mov	r0, r3
 8005892:	f7fb f9e5 	bl	8000c60 <__aeabi_i2f>
 8005896:	4603      	mov	r3, r0
 8005898:	4619      	mov	r1, r3
 800589a:	4620      	mov	r0, r4
 800589c:	f7fb f92c 	bl	8000af8 <__addsf3>
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	4b8c      	ldr	r3, [pc, #560]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 80058a6:	601a      	str	r2, [r3, #0]
				for (j = 1;j<i-2 ; j++)
 80058a8:	7dbb      	ldrb	r3, [r7, #22]
 80058aa:	3301      	adds	r3, #1
 80058ac:	75bb      	strb	r3, [r7, #22]
 80058ae:	7dba      	ldrb	r2, [r7, #22]
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	3b02      	subs	r3, #2
 80058b4:	429a      	cmp	r2, r3
 80058b6:	dbdf      	blt.n	8005878 <HAL_UART_RxCpltCallback+0x530>
			}
			k+=dec;
 80058b8:	4b87      	ldr	r3, [pc, #540]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6939      	ldr	r1, [r7, #16]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fb f91a 	bl	8000af8 <__addsf3>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	4b83      	ldr	r3, [pc, #524]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 80058ca:	601a      	str	r2, [r3, #0]
			kiangle = k;
 80058cc:	4b82      	ldr	r3, [pc, #520]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a84      	ldr	r2, [pc, #528]	; (8005ae4 <HAL_UART_RxCpltCallback+0x79c>)
 80058d2:	6013      	str	r3, [r2, #0]
		}

		//Nhap Kd
		if ((rxbuff == 'd') && (status == 0))
 80058d4:	4b84      	ldr	r3, [pc, #528]	; (8005ae8 <HAL_UART_RxCpltCallback+0x7a0>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b64      	cmp	r3, #100	; 0x64
 80058da:	f040 80f0 	bne.w	8005abe <HAL_UART_RxCpltCallback+0x776>
 80058de:	4b83      	ldr	r3, [pc, #524]	; (8005aec <HAL_UART_RxCpltCallback+0x7a4>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f040 80ea 	bne.w	8005abe <HAL_UART_RxCpltCallback+0x776>
		{
			HAL_UART_Transmit(&huart2, txbuff[4], sizeof(txbuff[4]), 1000);
 80058ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ee:	2232      	movs	r2, #50	; 0x32
 80058f0:	497f      	ldr	r1, [pc, #508]	; (8005af0 <HAL_UART_RxCpltCallback+0x7a8>)
 80058f2:	4880      	ldr	r0, [pc, #512]	; (8005af4 <HAL_UART_RxCpltCallback+0x7ac>)
 80058f4:	f7fe fc9a 	bl	800422c <HAL_UART_Transmit>
			while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 80058f8:	bf00      	nop
 80058fa:	4b7e      	ldr	r3, [pc, #504]	; (8005af4 <HAL_UART_RxCpltCallback+0x7ac>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d1f8      	bne.n	80058fa <HAL_UART_RxCpltCallback+0x5b2>
			uint8_t i = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]
			uint8_t j = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	73bb      	strb	r3, [r7, #14]
			float dec = 0;
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
			do
			{
				while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE));
 8005916:	bf00      	nop
 8005918:	4b76      	ldr	r3, [pc, #472]	; (8005af4 <HAL_UART_RxCpltCallback+0x7ac>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b20      	cmp	r3, #32
 8005924:	d1f8      	bne.n	8005918 <HAL_UART_RxCpltCallback+0x5d0>
				HAL_UART_Receive(&huart2, rxbuffs+i, 1, 1000);
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	4a6d      	ldr	r2, [pc, #436]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 800592a:	1899      	adds	r1, r3, r2
 800592c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005930:	2201      	movs	r2, #1
 8005932:	4870      	ldr	r0, [pc, #448]	; (8005af4 <HAL_UART_RxCpltCallback+0x7ac>)
 8005934:	f7fe fd13 	bl	800435e <HAL_UART_Receive>
				HAL_UART_Transmit(&huart2, rxbuffs+i, 1, 1000);
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	4a69      	ldr	r2, [pc, #420]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 800593c:	1899      	adds	r1, r3, r2
 800593e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005942:	2201      	movs	r2, #1
 8005944:	486b      	ldr	r0, [pc, #428]	; (8005af4 <HAL_UART_RxCpltCallback+0x7ac>)
 8005946:	f7fe fc71 	bl	800422c <HAL_UART_Transmit>
				while (!__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC));
 800594a:	bf00      	nop
 800594c:	4b69      	ldr	r3, [pc, #420]	; (8005af4 <HAL_UART_RxCpltCallback+0x7ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d1f8      	bne.n	800594c <HAL_UART_RxCpltCallback+0x604>
				if (rxbuffs[i] == '.')
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	4a60      	ldr	r2, [pc, #384]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 800595e:	5cd3      	ldrb	r3, [r2, r3]
 8005960:	2b2e      	cmp	r3, #46	; 0x2e
 8005962:	d12a      	bne.n	80059ba <HAL_UART_RxCpltCallback+0x672>
				{
					k = rxbuffs[0]-48;
 8005964:	4b5e      	ldr	r3, [pc, #376]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	3b30      	subs	r3, #48	; 0x30
 800596a:	4618      	mov	r0, r3
 800596c:	f7fb f978 	bl	8000c60 <__aeabi_i2f>
 8005970:	4602      	mov	r2, r0
 8005972:	4b59      	ldr	r3, [pc, #356]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 8005974:	601a      	str	r2, [r3, #0]
					for (j = 1;j<i ; j++)
 8005976:	2301      	movs	r3, #1
 8005978:	73bb      	strb	r3, [r7, #14]
 800597a:	e01a      	b.n	80059b2 <HAL_UART_RxCpltCallback+0x66a>
						k = k*10 + (rxbuffs[j]-48);
 800597c:	4b56      	ldr	r3, [pc, #344]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4956      	ldr	r1, [pc, #344]	; (8005adc <HAL_UART_RxCpltCallback+0x794>)
 8005982:	4618      	mov	r0, r3
 8005984:	f7fb f9c0 	bl	8000d08 <__aeabi_fmul>
 8005988:	4603      	mov	r3, r0
 800598a:	461c      	mov	r4, r3
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	4a54      	ldr	r2, [pc, #336]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 8005990:	5cd3      	ldrb	r3, [r2, r3]
 8005992:	3b30      	subs	r3, #48	; 0x30
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb f963 	bl	8000c60 <__aeabi_i2f>
 800599a:	4603      	mov	r3, r0
 800599c:	4619      	mov	r1, r3
 800599e:	4620      	mov	r0, r4
 80059a0:	f7fb f8aa 	bl	8000af8 <__addsf3>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	4b4b      	ldr	r3, [pc, #300]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 80059aa:	601a      	str	r2, [r3, #0]
					for (j = 1;j<i ; j++)
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	3301      	adds	r3, #1
 80059b0:	73bb      	strb	r3, [r7, #14]
 80059b2:	7bba      	ldrb	r2, [r7, #14]
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d3e0      	bcc.n	800597c <HAL_UART_RxCpltCallback+0x634>
					//j = i+1;
				}
			} while (rxbuffs[i++] != '\n');
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	73fa      	strb	r2, [r7, #15]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	2b0a      	cmp	r3, #10
 80059c8:	d1a5      	bne.n	8005916 <HAL_UART_RxCpltCallback+0x5ce>
			if (j)
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d03c      	beq.n	8005a4a <HAL_UART_RxCpltCallback+0x702>
			{
				for (i=i-3;i>j;i--)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	3b03      	subs	r3, #3
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e023      	b.n	8005a20 <HAL_UART_RxCpltCallback+0x6d8>
					dec = dec*0.1 + (rxbuffs[i]-48);
 80059d8:	68b8      	ldr	r0, [r7, #8]
 80059da:	f7fa fd1d 	bl	8000418 <__aeabi_f2d>
 80059de:	a33c      	add	r3, pc, #240	; (adr r3, 8005ad0 <HAL_UART_RxCpltCallback+0x788>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f7fa fd70 	bl	80004c8 <__aeabi_dmul>
 80059e8:	4603      	mov	r3, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4625      	mov	r5, r4
 80059ee:	461c      	mov	r4, r3
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	4a3b      	ldr	r2, [pc, #236]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 80059f4:	5cd3      	ldrb	r3, [r2, r3]
 80059f6:	3b30      	subs	r3, #48	; 0x30
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fa fcfb 	bl	80003f4 <__aeabi_i2d>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7fa fba9 	bl	800015c <__adddf3>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	4621      	mov	r1, r4
 8005a12:	f7fb f81b 	bl	8000a4c <__aeabi_d2f>
 8005a16:	4603      	mov	r3, r0
 8005a18:	60bb      	str	r3, [r7, #8]
				for (i=i-3;i>j;i--)
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	7bfa      	ldrb	r2, [r7, #15]
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d8d7      	bhi.n	80059d8 <HAL_UART_RxCpltCallback+0x690>
				dec = dec*0.1;
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	f7fa fcf5 	bl	8000418 <__aeabi_f2d>
 8005a2e:	a328      	add	r3, pc, #160	; (adr r3, 8005ad0 <HAL_UART_RxCpltCallback+0x788>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fd48 	bl	80004c8 <__aeabi_dmul>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	4621      	mov	r1, r4
 8005a40:	f7fb f804 	bl	8000a4c <__aeabi_d2f>
 8005a44:	4603      	mov	r3, r0
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	e02b      	b.n	8005aa2 <HAL_UART_RxCpltCallback+0x75a>
			}
			else
			{
				k = rxbuffs[0]-48;
 8005a4a:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	3b30      	subs	r3, #48	; 0x30
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fb f905 	bl	8000c60 <__aeabi_i2f>
 8005a56:	4602      	mov	r2, r0
 8005a58:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 8005a5a:	601a      	str	r2, [r3, #0]
				for (j = 1;j<i-2 ; j++)
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73bb      	strb	r3, [r7, #14]
 8005a60:	e01a      	b.n	8005a98 <HAL_UART_RxCpltCallback+0x750>
				k = k*10 + (rxbuffs[j]-48);
 8005a62:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	491d      	ldr	r1, [pc, #116]	; (8005adc <HAL_UART_RxCpltCallback+0x794>)
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fb f94d 	bl	8000d08 <__aeabi_fmul>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461c      	mov	r4, r3
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <HAL_UART_RxCpltCallback+0x798>)
 8005a76:	5cd3      	ldrb	r3, [r2, r3]
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fb f8f0 	bl	8000c60 <__aeabi_i2f>
 8005a80:	4603      	mov	r3, r0
 8005a82:	4619      	mov	r1, r3
 8005a84:	4620      	mov	r0, r4
 8005a86:	f7fb f837 	bl	8000af8 <__addsf3>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 8005a90:	601a      	str	r2, [r3, #0]
				for (j = 1;j<i-2 ; j++)
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	3301      	adds	r3, #1
 8005a96:	73bb      	strb	r3, [r7, #14]
 8005a98:	7bba      	ldrb	r2, [r7, #14]
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	3b02      	subs	r3, #2
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	dbdf      	blt.n	8005a62 <HAL_UART_RxCpltCallback+0x71a>
			}
			k+=dec;
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fb f825 	bl	8000af8 <__addsf3>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 8005ab4:	601a      	str	r2, [r3, #0]
			kdangle = k;
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <HAL_UART_RxCpltCallback+0x790>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <HAL_UART_RxCpltCallback+0x7b0>)
 8005abc:	6013      	str	r3, [r2, #0]
				k = k*10 + (rxbuffs[j]-48);
			}
			choose = k;
		}*/

		HAL_UART_Receive_IT(&huart2, &rxbuff, 1);
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4909      	ldr	r1, [pc, #36]	; (8005ae8 <HAL_UART_RxCpltCallback+0x7a0>)
 8005ac2:	480c      	ldr	r0, [pc, #48]	; (8005af4 <HAL_UART_RxCpltCallback+0x7ac>)
 8005ac4:	f7fe fcf1 	bl	80044aa <HAL_UART_Receive_IT>
	}
}
 8005ac8:	bf00      	nop
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad0:	9999999a 	.word	0x9999999a
 8005ad4:	3fb99999 	.word	0x3fb99999
 8005ad8:	200001b8 	.word	0x200001b8
 8005adc:	41200000 	.word	0x41200000
 8005ae0:	200002f8 	.word	0x200002f8
 8005ae4:	20000010 	.word	0x20000010
 8005ae8:	200001be 	.word	0x200001be
 8005aec:	200001b6 	.word	0x200001b6
 8005af0:	200000e4 	.word	0x200000e4
 8005af4:	2000038c 	.word	0x2000038c
 8005af8:	20000014 	.word	0x20000014

08005afc <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4611      	mov	r1, r2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	71fb      	strb	r3, [r7, #7]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8005b12:	2375      	movs	r3, #117	; 0x75
 8005b14:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8005b2c:	7efb      	ldrb	r3, [r7, #27]
 8005b2e:	b299      	uxth	r1, r3
 8005b30:	2305      	movs	r3, #5
 8005b32:	2202      	movs	r2, #2
 8005b34:	69f8      	ldr	r0, [r7, #28]
 8005b36:	f7fc fa71 	bl	800201c <HAL_I2C_IsDeviceReady>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e04c      	b.n	8005bde <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8005b44:	7efb      	ldrb	r3, [r7, #27]
 8005b46:	b299      	uxth	r1, r3
 8005b48:	f107 021a 	add.w	r2, r7, #26
 8005b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2301      	movs	r3, #1
 8005b54:	69f8      	ldr	r0, [r7, #28]
 8005b56:	f7fb ff19 	bl	800198c <HAL_I2C_Master_Transmit>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e03c      	b.n	8005bde <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8005b64:	7efb      	ldrb	r3, [r7, #27]
 8005b66:	b299      	uxth	r1, r3
 8005b68:	f107 0219 	add.w	r2, r7, #25
 8005b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	2301      	movs	r3, #1
 8005b74:	69f8      	ldr	r0, [r7, #28]
 8005b76:	f7fc f817 	bl	8001ba8 <HAL_I2C_Master_Receive>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e02c      	b.n	8005bde <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e02a      	b.n	8005bde <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8005b88:	bf00      	nop
 8005b8a:	7e7b      	ldrb	r3, [r7, #25]
 8005b8c:	2b68      	cmp	r3, #104	; 0x68
 8005b8e:	d1f9      	bne.n	8005b84 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8005b90:	236b      	movs	r3, #107	; 0x6b
 8005b92:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8005b94:	2300      	movs	r3, #0
 8005b96:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8005b98:	7efb      	ldrb	r3, [r7, #27]
 8005b9a:	b299      	uxth	r1, r3
 8005b9c:	f107 0214 	add.w	r2, r7, #20
 8005ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	69f8      	ldr	r0, [r7, #28]
 8005baa:	f7fb feef 	bl	800198c <HAL_I2C_Master_Transmit>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e012      	b.n	8005bde <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 8kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_8KHz);
 8005bb8:	2200      	movs	r2, #0
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f812 	bl	8005be6 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8005bc2:	79bb      	ldrb	r3, [r7, #6]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f831 	bl	8005c30 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8005bce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f89a 	bl	8005d10 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b088      	sub	sp, #32
 8005bea:	af02      	add	r7, sp, #8
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8005bfe:	2319      	movs	r3, #25
 8005c00:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8005c06:	bf00      	nop
 8005c08:	7cfb      	ldrb	r3, [r7, #19]
 8005c0a:	b299      	uxth	r1, r3
 8005c0c:	f107 0210 	add.w	r2, r7, #16
 8005c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2302      	movs	r3, #2
 8005c18:	6978      	ldr	r0, [r7, #20]
 8005c1a:	f7fb feb7 	bl	800198c <HAL_I2C_Master_Transmit>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f1      	bne.n	8005c08 <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8005c48:	231c      	movs	r3, #28
 8005c4a:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8005c4c:	bf00      	nop
 8005c4e:	7cfb      	ldrb	r3, [r7, #19]
 8005c50:	b299      	uxth	r1, r3
 8005c52:	f107 0211 	add.w	r2, r7, #17
 8005c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	f7fb fe94 	bl	800198c <HAL_I2C_Master_Transmit>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f1      	bne.n	8005c4e <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8005c6a:	bf00      	nop
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	b299      	uxth	r1, r3
 8005c70:	f107 0212 	add.w	r2, r7, #18
 8005c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	6978      	ldr	r0, [r7, #20]
 8005c7e:	f7fb ff93 	bl	8001ba8 <HAL_I2C_Master_Receive>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f1      	bne.n	8005c6c <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8005c88:	7cbb      	ldrb	r3, [r7, #18]
 8005c8a:	b25b      	sxtb	r3, r3
 8005c8c:	f023 0318 	bic.w	r3, r3, #24
 8005c90:	b25a      	sxtb	r2, r3
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	b25b      	sxtb	r3, r3
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	b25b      	sxtb	r3, r3
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8005ca0:	bf00      	nop
 8005ca2:	7cfb      	ldrb	r3, [r7, #19]
 8005ca4:	b299      	uxth	r1, r3
 8005ca6:	f107 0212 	add.w	r2, r7, #18
 8005caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	6978      	ldr	r0, [r7, #20]
 8005cb4:	f7fb fe6a 	bl	800198c <HAL_I2C_Master_Transmit>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f1      	bne.n	8005ca2 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d81f      	bhi.n	8005d04 <SD_MPU6050_SetAccelerometer+0xd4>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <SD_MPU6050_SetAccelerometer+0x9c>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ce7 	.word	0x08005ce7
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005cfb 	.word	0x08005cfb
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8005ce2:	609a      	str	r2, [r3, #8]
			break;
 8005ce4:	e00f      	b.n	8005d06 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8005cec:	609a      	str	r2, [r3, #8]
			break;
 8005cee:	e00a      	b.n	8005d06 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8005cf6:	609a      	str	r2, [r3, #8]
			break;
 8005cf8:	e005      	b.n	8005d06 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8005d00:	609a      	str	r2, [r3, #8]
			break;
 8005d02:	e000      	b.n	8005d06 <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8005d04:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8005d28:	231b      	movs	r3, #27
 8005d2a:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8005d2c:	bf00      	nop
 8005d2e:	7cfb      	ldrb	r3, [r7, #19]
 8005d30:	b299      	uxth	r1, r3
 8005d32:	f107 0211 	add.w	r2, r7, #17
 8005d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f7fb fe24 	bl	800198c <HAL_I2C_Master_Transmit>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f1      	bne.n	8005d2e <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8005d4a:	bf00      	nop
 8005d4c:	7cfb      	ldrb	r3, [r7, #19]
 8005d4e:	b299      	uxth	r1, r3
 8005d50:	f107 0212 	add.w	r2, r7, #18
 8005d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f7fb ff23 	bl	8001ba8 <HAL_I2C_Master_Receive>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f1      	bne.n	8005d4c <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8005d68:	7cbb      	ldrb	r3, [r7, #18]
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	f023 0318 	bic.w	r3, r3, #24
 8005d70:	b25a      	sxtb	r2, r3
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	b25b      	sxtb	r3, r3
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8005d80:	bf00      	nop
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	b299      	uxth	r1, r3
 8005d86:	f107 0212 	add.w	r2, r7, #18
 8005d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2301      	movs	r3, #1
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7fb fdfa 	bl	800198c <HAL_I2C_Master_Transmit>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f1      	bne.n	8005d82 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d81b      	bhi.n	8005ddc <SD_MPU6050_SetGyroscope+0xcc>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <SD_MPU6050_SetGyroscope+0x9c>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dc5 	.word	0x08005dc5
 8005db4:	08005dcd 	.word	0x08005dcd
 8005db8:	08005dd5 	.word	0x08005dd5
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <SD_MPU6050_SetGyroscope+0xd8>)
 8005dc0:	605a      	str	r2, [r3, #4]
				break;
 8005dc2:	e00c      	b.n	8005dde <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <SD_MPU6050_SetGyroscope+0xdc>)
 8005dc8:	605a      	str	r2, [r3, #4]
				break;
 8005dca:	e008      	b.n	8005dde <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <SD_MPU6050_SetGyroscope+0xe0>)
 8005dd0:	605a      	str	r2, [r3, #4]
				break;
 8005dd2:	e004      	b.n	8005dde <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <SD_MPU6050_SetGyroscope+0xe4>)
 8005dd8:	605a      	str	r2, [r3, #4]
				break;
 8005dda:	e000      	b.n	8005dde <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8005ddc:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	3bfa232d 	.word	0x3bfa232d
 8005dec:	3c7a232d 	.word	0x3c7a232d
 8005df0:	3cf9c190 	.word	0x3cf9c190
 8005df4:	3d79c190 	.word	0x3d79c190

08005df8 <SD_MPU6050_ReadAccelerometer>:


SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8005e02:	233b      	movs	r3, #59	; 0x3b
 8005e04:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8005e10:	bf00      	nop
 8005e12:	7cfb      	ldrb	r3, [r7, #19]
 8005e14:	b299      	uxth	r1, r3
 8005e16:	f107 020b 	add.w	r2, r7, #11
 8005e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2301      	movs	r3, #1
 8005e22:	6978      	ldr	r0, [r7, #20]
 8005e24:	f7fb fdb2 	bl	800198c <HAL_I2C_Master_Transmit>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f1      	bne.n	8005e12 <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8005e2e:	bf00      	nop
 8005e30:	7cfb      	ldrb	r3, [r7, #19]
 8005e32:	b299      	uxth	r1, r3
 8005e34:	f107 020c 	add.w	r2, r7, #12
 8005e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2306      	movs	r3, #6
 8005e40:	6978      	ldr	r0, [r7, #20]
 8005e42:	f7fb feb1 	bl	8001ba8 <HAL_I2C_Master_Receive>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f1      	bne.n	8005e30 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8005e4c:	7b3b      	ldrb	r3, [r7, #12]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	b21a      	sxth	r2, r3
 8005e52:	7b7b      	ldrb	r3, [r7, #13]
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	4313      	orrs	r3, r2
 8005e58:	b21a      	sxth	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	b21a      	sxth	r2, r3
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b21a      	sxth	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8005e70:	7c3b      	ldrb	r3, [r7, #16]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	b21a      	sxth	r2, r3
 8005e76:	7c7b      	ldrb	r3, [r7, #17]
 8005e78:	b21b      	sxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b21a      	sxth	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8005e96:	2343      	movs	r3, #67	; 0x43
 8005e98:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8005ea4:	bf00      	nop
 8005ea6:	7cfb      	ldrb	r3, [r7, #19]
 8005ea8:	b299      	uxth	r1, r3
 8005eaa:	f107 020b 	add.w	r2, r7, #11
 8005eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	6978      	ldr	r0, [r7, #20]
 8005eb8:	f7fb fd68 	bl	800198c <HAL_I2C_Master_Transmit>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f1      	bne.n	8005ea6 <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8005ec2:	bf00      	nop
 8005ec4:	7cfb      	ldrb	r3, [r7, #19]
 8005ec6:	b299      	uxth	r1, r3
 8005ec8:	f107 020c 	add.w	r2, r7, #12
 8005ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	2306      	movs	r3, #6
 8005ed4:	6978      	ldr	r0, [r7, #20]
 8005ed6:	f7fb fe67 	bl	8001ba8 <HAL_I2C_Master_Receive>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f1      	bne.n	8005ec4 <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8005ee0:	7b3b      	ldrb	r3, [r7, #12]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	b21a      	sxth	r2, r3
 8005ee6:	7b7b      	ldrb	r3, [r7, #13]
 8005ee8:	b21b      	sxth	r3, r3
 8005eea:	4313      	orrs	r3, r2
 8005eec:	b21a      	sxth	r2, r3
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	b21a      	sxth	r2, r3
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	4313      	orrs	r3, r2
 8005efe:	b21a      	sxth	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8005f04:	7c3b      	ldrb	r3, [r7, #16]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	b21a      	sxth	r2, r3
 8005f0a:	7c7b      	ldrb	r3, [r7, #17]
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	b21a      	sxth	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <SD_MPU6050_ReadAll>:
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8005f2a:	233b      	movs	r3, #59	; 0x3b
 8005f2c:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8005f3a:	bf00      	nop
 8005f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f40:	b299      	uxth	r1, r3
 8005f42:	f107 020f 	add.w	r2, r7, #15
 8005f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f50:	f7fb fd1c 	bl	800198c <HAL_I2C_Master_Transmit>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <SD_MPU6050_ReadAll+0x1c>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1000) != HAL_OK);
 8005f5a:	bf00      	nop
 8005f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f60:	b299      	uxth	r1, r3
 8005f62:	f107 0210 	add.w	r2, r7, #16
 8005f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	230e      	movs	r3, #14
 8005f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f70:	f7fb fe1a 	bl	8001ba8 <HAL_I2C_Master_Receive>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <SD_MPU6050_ReadAll+0x3c>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8005f7a:	7c3b      	ldrb	r3, [r7, #16]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	7c7b      	ldrb	r3, [r7, #17]
 8005f82:	b21b      	sxth	r3, r3
 8005f84:	4313      	orrs	r3, r2
 8005f86:	b21a      	sxth	r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8005f8c:	7cbb      	ldrb	r3, [r7, #18]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	b21a      	sxth	r2, r3
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	b21b      	sxth	r3, r3
 8005f96:	4313      	orrs	r3, r2
 8005f98:	b21a      	sxth	r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8005f9e:	7d3b      	ldrb	r3, [r7, #20]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	b21a      	sxth	r2, r3
 8005fa4:	7d7b      	ldrb	r3, [r7, #21]
 8005fa6:	b21b      	sxth	r3, r3
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	b21a      	sxth	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8005fb0:	7dbb      	ldrb	r3, [r7, #22]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	b21a      	sxth	r2, r3
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8005fbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fa fe4c 	bl	8000c60 <__aeabi_i2f>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	4916      	ldr	r1, [pc, #88]	; (8006024 <SD_MPU6050_ReadAll+0x104>)
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa ff4f 	bl	8000e70 <__aeabi_fdiv>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4914      	ldr	r1, [pc, #80]	; (8006028 <SD_MPU6050_ReadAll+0x108>)
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa fd8e 	bl	8000af8 <__addsf3>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	619a      	str	r2, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8005fe4:	7e3b      	ldrb	r3, [r7, #24]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	b21a      	sxth	r2, r3
 8005fea:	7e7b      	ldrb	r3, [r7, #25]
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b21a      	sxth	r2, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 8005ff6:	7ebb      	ldrb	r3, [r7, #26]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	b21a      	sxth	r2, r3
 8005ffc:	7efb      	ldrb	r3, [r7, #27]
 8005ffe:	b21b      	sxth	r3, r3
 8006000:	4313      	orrs	r3, r2
 8006002:	b21a      	sxth	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8006008:	7f3b      	ldrb	r3, [r7, #28]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	b21a      	sxth	r2, r3
 800600e:	7f7b      	ldrb	r3, [r7, #29]
 8006010:	b21b      	sxth	r3, r3
 8006012:	4313      	orrs	r3, r2
 8006014:	b21a      	sxth	r2, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3728      	adds	r7, #40	; 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	43aa0000 	.word	0x43aa0000
 8006028:	42121eb8 	.word	0x42121eb8

0800602c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	; 0x28
 8006030:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	char* mpu_ok = {"MPU WORK FINE\n"};
 8006032:	4b99      	ldr	r3, [pc, #612]	; (8006298 <main+0x26c>)
 8006034:	617b      	str	r3, [r7, #20]
	char* mpu_not = {"MPU NOT WORKING\n"};
 8006036:	4b99      	ldr	r3, [pc, #612]	; (800629c <main+0x270>)
 8006038:	613b      	str	r3, [r7, #16]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800603a:	f7fb f84b 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800603e:	f000 f95b 	bl	80062f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006042:	f000 fb97 	bl	8006774 <MX_GPIO_Init>
  MX_TIM2_Init();
 8006046:	f000 fa75 	bl	8006534 <MX_TIM2_Init>
  MX_TIM3_Init();
 800604a:	f000 fac7 	bl	80065dc <MX_TIM3_Init>
  MX_TIM1_Init();
 800604e:	f000 f9c3 	bl	80063d8 <MX_TIM1_Init>
  MX_I2C2_Init();
 8006052:	f000 f993 	bl	800637c <MX_I2C2_Init>
  MX_TIM4_Init();
 8006056:	f000 fb15 	bl	8006684 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800605a:	f000 fb61 	bl	8006720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Init mpu6050
  result = SD_MPU6050_Init(&hi2c2,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_2000s );
 800605e:	2303      	movs	r3, #3
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	2300      	movs	r3, #0
 8006064:	2200      	movs	r2, #0
 8006066:	498e      	ldr	r1, [pc, #568]	; (80062a0 <main+0x274>)
 8006068:	488e      	ldr	r0, [pc, #568]	; (80062a4 <main+0x278>)
 800606a:	f7ff fd47 	bl	8005afc <SD_MPU6050_Init>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	4b8d      	ldr	r3, [pc, #564]	; (80062a8 <main+0x27c>)
 8006074:	701a      	strb	r2, [r3, #0]
  	if(result != SD_MPU6050_Result_Ok)
 8006076:	4b8c      	ldr	r3, [pc, #560]	; (80062a8 <main+0x27c>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <main+0x62>
  	  {
  		  HAL_UART_Transmit(&huart2,(uint8_t*)mpu_ok,15,1000);
 800607e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006082:	220f      	movs	r2, #15
 8006084:	6979      	ldr	r1, [r7, #20]
 8006086:	4889      	ldr	r0, [pc, #548]	; (80062ac <main+0x280>)
 8006088:	f7fe f8d0 	bl	800422c <HAL_UART_Transmit>
 800608c:	e006      	b.n	800609c <main+0x70>
  	  }
  	  else
  	  {
  		  HAL_UART_Transmit(&huart2,(uint8_t*)mpu_not,17,1000);
 800608e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006092:	2211      	movs	r2, #17
 8006094:	6939      	ldr	r1, [r7, #16]
 8006096:	4885      	ldr	r0, [pc, #532]	; (80062ac <main+0x280>)
 8006098:	f7fe f8c8 	bl	800422c <HAL_UART_Transmit>
  	  }

  // read accelerometer bias
  	for( int i=0;i<500;i++)
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	e060      	b.n	8006164 <main+0x138>
  		{
  			SD_MPU6050_ReadAccelerometer(&hi2c2,&mpu1);
 80060a2:	497f      	ldr	r1, [pc, #508]	; (80062a0 <main+0x274>)
 80060a4:	487f      	ldr	r0, [pc, #508]	; (80062a4 <main+0x278>)
 80060a6:	f7ff fea7 	bl	8005df8 <SD_MPU6050_ReadAccelerometer>
  			int16_t a_x = mpu1.Accelerometer_X;
 80060aa:	4b7d      	ldr	r3, [pc, #500]	; (80062a0 <main+0x274>)
 80060ac:	899b      	ldrh	r3, [r3, #12]
 80060ae:	813b      	strh	r3, [r7, #8]
  			int16_t a_y = mpu1.Accelerometer_Y;
 80060b0:	4b7b      	ldr	r3, [pc, #492]	; (80062a0 <main+0x274>)
 80060b2:	89db      	ldrh	r3, [r3, #14]
 80060b4:	80fb      	strh	r3, [r7, #6]
  			int16_t a_z = mpu1.Accelerometer_Z;
 80060b6:	4b7a      	ldr	r3, [pc, #488]	; (80062a0 <main+0x274>)
 80060b8:	8a1b      	ldrh	r3, [r3, #16]
 80060ba:	80bb      	strh	r3, [r7, #4]
  			gForcex = (float)a_x/16384;
 80060bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fa fdcd 	bl	8000c60 <__aeabi_i2f>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fa fecf 	bl	8000e70 <__aeabi_fdiv>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b76      	ldr	r3, [pc, #472]	; (80062b0 <main+0x284>)
 80060d8:	601a      	str	r2, [r3, #0]
  			gForcey = (float)a_y/16384;
 80060da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa fdbe 	bl	8000c60 <__aeabi_i2f>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fa fec0 	bl	8000e70 <__aeabi_fdiv>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <main+0x288>)
 80060f6:	601a      	str	r2, [r3, #0]
  			gForcez = (float)a_z/16384;
 80060f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fa fdaf 	bl	8000c60 <__aeabi_i2f>
 8006102:	4603      	mov	r3, r0
 8006104:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006108:	4618      	mov	r0, r3
 800610a:	f7fa feb1 	bl	8000e70 <__aeabi_fdiv>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	4b69      	ldr	r3, [pc, #420]	; (80062b8 <main+0x28c>)
 8006114:	601a      	str	r2, [r3, #0]
  			sum_gForcex += gForcex;
 8006116:	4b69      	ldr	r3, [pc, #420]	; (80062bc <main+0x290>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b65      	ldr	r3, [pc, #404]	; (80062b0 <main+0x284>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fa fce9 	bl	8000af8 <__addsf3>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	4b64      	ldr	r3, [pc, #400]	; (80062bc <main+0x290>)
 800612c:	601a      	str	r2, [r3, #0]
  			sum_gForcey += gForcey;
 800612e:	4b64      	ldr	r3, [pc, #400]	; (80062c0 <main+0x294>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b60      	ldr	r3, [pc, #384]	; (80062b4 <main+0x288>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7fa fcdd 	bl	8000af8 <__addsf3>
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	4b5f      	ldr	r3, [pc, #380]	; (80062c0 <main+0x294>)
 8006144:	601a      	str	r2, [r3, #0]
  			sum_gForcez += gForcez;
 8006146:	4b5f      	ldr	r3, [pc, #380]	; (80062c4 <main+0x298>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b5b      	ldr	r3, [pc, #364]	; (80062b8 <main+0x28c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f7fa fcd1 	bl	8000af8 <__addsf3>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	4b5a      	ldr	r3, [pc, #360]	; (80062c4 <main+0x298>)
 800615c:	601a      	str	r2, [r3, #0]
  	for( int i=0;i<500;i++)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	3301      	adds	r3, #1
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800616a:	db9a      	blt.n	80060a2 <main+0x76>
  		}
  	bias_gForcex = sum_gForcex/500;
 800616c:	4b53      	ldr	r3, [pc, #332]	; (80062bc <main+0x290>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4955      	ldr	r1, [pc, #340]	; (80062c8 <main+0x29c>)
 8006172:	4618      	mov	r0, r3
 8006174:	f7fa fe7c 	bl	8000e70 <__aeabi_fdiv>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	4b53      	ldr	r3, [pc, #332]	; (80062cc <main+0x2a0>)
 800617e:	601a      	str	r2, [r3, #0]
  	bias_gForcey = sum_gForcey/500;
 8006180:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <main+0x294>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4950      	ldr	r1, [pc, #320]	; (80062c8 <main+0x29c>)
 8006186:	4618      	mov	r0, r3
 8006188:	f7fa fe72 	bl	8000e70 <__aeabi_fdiv>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	4b4f      	ldr	r3, [pc, #316]	; (80062d0 <main+0x2a4>)
 8006192:	601a      	str	r2, [r3, #0]
  	bias_gForcez = sum_gForcez/500 +1;
 8006194:	4b4b      	ldr	r3, [pc, #300]	; (80062c4 <main+0x298>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	494b      	ldr	r1, [pc, #300]	; (80062c8 <main+0x29c>)
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa fe68 	bl	8000e70 <__aeabi_fdiv>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fa fca6 	bl	8000af8 <__addsf3>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	4b48      	ldr	r3, [pc, #288]	; (80062d4 <main+0x2a8>)
 80061b2:	601a      	str	r2, [r3, #0]

  // read gyroscope bias
  	for( int i=0;i<500;i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e03f      	b.n	800623a <main+0x20e>
  		{
  			SD_MPU6050_ReadGyroscope(&hi2c2,&mpu1);
 80061ba:	4939      	ldr	r1, [pc, #228]	; (80062a0 <main+0x274>)
 80061bc:	4839      	ldr	r0, [pc, #228]	; (80062a4 <main+0x278>)
 80061be:	f7ff fe65 	bl	8005e8c <SD_MPU6050_ReadGyroscope>
  			int16_t g_x = mpu1.Gyroscope_X;
 80061c2:	4b37      	ldr	r3, [pc, #220]	; (80062a0 <main+0x274>)
 80061c4:	8a5b      	ldrh	r3, [r3, #18]
 80061c6:	81fb      	strh	r3, [r7, #14]
  			int16_t g_y = mpu1.Gyroscope_Y;
 80061c8:	4b35      	ldr	r3, [pc, #212]	; (80062a0 <main+0x274>)
 80061ca:	8a9b      	ldrh	r3, [r3, #20]
 80061cc:	81bb      	strh	r3, [r7, #12]
  			int16_t g_z = mpu1.Gyroscope_Z;
 80061ce:	4b34      	ldr	r3, [pc, #208]	; (80062a0 <main+0x274>)
 80061d0:	8adb      	ldrh	r3, [r3, #22]
 80061d2:	817b      	strh	r3, [r7, #10]
  			sum_rotx += g_x;
 80061d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fa fd41 	bl	8000c60 <__aeabi_i2f>
 80061de:	4602      	mov	r2, r0
 80061e0:	4b3d      	ldr	r3, [pc, #244]	; (80062d8 <main+0x2ac>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f7fa fc86 	bl	8000af8 <__addsf3>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <main+0x2ac>)
 80061f2:	601a      	str	r2, [r3, #0]
  			sum_roty += g_y;
 80061f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fa fd31 	bl	8000c60 <__aeabi_i2f>
 80061fe:	4602      	mov	r2, r0
 8006200:	4b36      	ldr	r3, [pc, #216]	; (80062dc <main+0x2b0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f7fa fc76 	bl	8000af8 <__addsf3>
 800620c:	4603      	mov	r3, r0
 800620e:	461a      	mov	r2, r3
 8006210:	4b32      	ldr	r3, [pc, #200]	; (80062dc <main+0x2b0>)
 8006212:	601a      	str	r2, [r3, #0]
  			sum_rotz += g_z;
 8006214:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006218:	4618      	mov	r0, r3
 800621a:	f7fa fd21 	bl	8000c60 <__aeabi_i2f>
 800621e:	4602      	mov	r2, r0
 8006220:	4b2f      	ldr	r3, [pc, #188]	; (80062e0 <main+0x2b4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fa fc66 	bl	8000af8 <__addsf3>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <main+0x2b4>)
 8006232:	601a      	str	r2, [r3, #0]
  	for( int i=0;i<500;i++)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	3301      	adds	r3, #1
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006240:	dbbb      	blt.n	80061ba <main+0x18e>
  		}
  	bias_rotx = sum_rotx/500;
 8006242:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <main+0x2ac>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4920      	ldr	r1, [pc, #128]	; (80062c8 <main+0x29c>)
 8006248:	4618      	mov	r0, r3
 800624a:	f7fa fe11 	bl	8000e70 <__aeabi_fdiv>
 800624e:	4603      	mov	r3, r0
 8006250:	461a      	mov	r2, r3
 8006252:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <main+0x2b8>)
 8006254:	601a      	str	r2, [r3, #0]
  	bias_roty = sum_roty/500;
 8006256:	4b21      	ldr	r3, [pc, #132]	; (80062dc <main+0x2b0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	491b      	ldr	r1, [pc, #108]	; (80062c8 <main+0x29c>)
 800625c:	4618      	mov	r0, r3
 800625e:	f7fa fe07 	bl	8000e70 <__aeabi_fdiv>
 8006262:	4603      	mov	r3, r0
 8006264:	461a      	mov	r2, r3
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <main+0x2bc>)
 8006268:	601a      	str	r2, [r3, #0]
  	bias_rotz = sum_rotz/500;
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <main+0x2b4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4916      	ldr	r1, [pc, #88]	; (80062c8 <main+0x29c>)
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa fdfd 	bl	8000e70 <__aeabi_fdiv>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <main+0x2c0>)
 800627c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart2, &rxbuff, 1);
 800627e:	2201      	movs	r2, #1
 8006280:	491b      	ldr	r1, [pc, #108]	; (80062f0 <main+0x2c4>)
 8006282:	480a      	ldr	r0, [pc, #40]	; (80062ac <main+0x280>)
 8006284:	f7fe f911 	bl	80044aa <HAL_UART_Receive_IT>
	  OutputPWM(duty);
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <main+0x2c8>)
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b21b      	sxth	r3, r3
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe fff4 	bl	800527c <OutputPWM>
	  HAL_UART_Receive_IT(&huart2, &rxbuff, 1);
 8006294:	e7f3      	b.n	800627e <main+0x252>
 8006296:	bf00      	nop
 8006298:	08007278 	.word	0x08007278
 800629c:	08007288 	.word	0x08007288
 80062a0:	200003f4 	.word	0x200003f4
 80062a4:	20000264 	.word	0x20000264
 80062a8:	2000034b 	.word	0x2000034b
 80062ac:	2000038c 	.word	0x2000038c
 80062b0:	200001cc 	.word	0x200001cc
 80062b4:	200001d0 	.word	0x200001d0
 80062b8:	200001d4 	.word	0x200001d4
 80062bc:	200001c0 	.word	0x200001c0
 80062c0:	200001c4 	.word	0x200001c4
 80062c4:	200001c8 	.word	0x200001c8
 80062c8:	43fa0000 	.word	0x43fa0000
 80062cc:	200001d8 	.word	0x200001d8
 80062d0:	200001dc 	.word	0x200001dc
 80062d4:	200001e0 	.word	0x200001e0
 80062d8:	200001e4 	.word	0x200001e4
 80062dc:	200001e8 	.word	0x200001e8
 80062e0:	200001ec 	.word	0x200001ec
 80062e4:	200001fc 	.word	0x200001fc
 80062e8:	20000200 	.word	0x20000200
 80062ec:	20000204 	.word	0x20000204
 80062f0:	200001be 	.word	0x200001be
 80062f4:	200001bc 	.word	0x200001bc

080062f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b090      	sub	sp, #64	; 0x40
 80062fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062fe:	f107 0318 	add.w	r3, r7, #24
 8006302:	2228      	movs	r2, #40	; 0x28
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fd20 	bl	8006d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800631a:	2302      	movs	r3, #2
 800631c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800631e:	2301      	movs	r3, #1
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006322:	2310      	movs	r3, #16
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006326:	2302      	movs	r3, #2
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800632a:	2300      	movs	r3, #0
 800632c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800632e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006334:	f107 0318 	add.w	r3, r7, #24
 8006338:	4618      	mov	r0, r3
 800633a:	f7fc fa93 	bl	8002864 <HAL_RCC_OscConfig>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8006344:	f000 fa8e 	bl	8006864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006348:	230f      	movs	r3, #15
 800634a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800634c:	2302      	movs	r3, #2
 800634e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	2102      	movs	r1, #2
 8006362:	4618      	mov	r0, r3
 8006364:	f7fc fce2 	bl	8002d2c <HAL_RCC_ClockConfig>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800636e:	f000 fa79 	bl	8006864 <Error_Handler>
  }
}
 8006372:	bf00      	nop
 8006374:	3740      	adds	r7, #64	; 0x40
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006380:	4b12      	ldr	r3, [pc, #72]	; (80063cc <MX_I2C2_Init+0x50>)
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <MX_I2C2_Init+0x54>)
 8006384:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <MX_I2C2_Init+0x50>)
 8006388:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <MX_I2C2_Init+0x58>)
 800638a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <MX_I2C2_Init+0x50>)
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <MX_I2C2_Init+0x50>)
 8006394:	2200      	movs	r2, #0
 8006396:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <MX_I2C2_Init+0x50>)
 800639a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800639e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063a0:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <MX_I2C2_Init+0x50>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <MX_I2C2_Init+0x50>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063ac:	4b07      	ldr	r3, [pc, #28]	; (80063cc <MX_I2C2_Init+0x50>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <MX_I2C2_Init+0x50>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80063b8:	4804      	ldr	r0, [pc, #16]	; (80063cc <MX_I2C2_Init+0x50>)
 80063ba:	f7fb f9e3 	bl	8001784 <HAL_I2C_Init>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80063c4:	f000 fa4e 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80063c8:	bf00      	nop
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20000264 	.word	0x20000264
 80063d0:	40005800 	.word	0x40005800
 80063d4:	00061a80 	.word	0x00061a80

080063d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b094      	sub	sp, #80	; 0x50
 80063dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	609a      	str	r2, [r3, #8]
 80063ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063f6:	f107 031c 	add.w	r3, r7, #28
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	609a      	str	r2, [r3, #8]
 8006402:	60da      	str	r2, [r3, #12]
 8006404:	611a      	str	r2, [r3, #16]
 8006406:	615a      	str	r2, [r3, #20]
 8006408:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800640a:	463b      	mov	r3, r7
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	611a      	str	r2, [r3, #16]
 8006418:	615a      	str	r2, [r3, #20]
 800641a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800641c:	4b43      	ldr	r3, [pc, #268]	; (800652c <MX_TIM1_Init+0x154>)
 800641e:	4a44      	ldr	r2, [pc, #272]	; (8006530 <MX_TIM1_Init+0x158>)
 8006420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8006422:	4b42      	ldr	r3, [pc, #264]	; (800652c <MX_TIM1_Init+0x154>)
 8006424:	220f      	movs	r2, #15
 8006426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006428:	4b40      	ldr	r3, [pc, #256]	; (800652c <MX_TIM1_Init+0x154>)
 800642a:	2200      	movs	r2, #0
 800642c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800642e:	4b3f      	ldr	r3, [pc, #252]	; (800652c <MX_TIM1_Init+0x154>)
 8006430:	2263      	movs	r2, #99	; 0x63
 8006432:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006434:	4b3d      	ldr	r3, [pc, #244]	; (800652c <MX_TIM1_Init+0x154>)
 8006436:	2200      	movs	r2, #0
 8006438:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800643a:	4b3c      	ldr	r3, [pc, #240]	; (800652c <MX_TIM1_Init+0x154>)
 800643c:	2200      	movs	r2, #0
 800643e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006440:	4b3a      	ldr	r3, [pc, #232]	; (800652c <MX_TIM1_Init+0x154>)
 8006442:	2200      	movs	r2, #0
 8006444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006446:	4839      	ldr	r0, [pc, #228]	; (800652c <MX_TIM1_Init+0x154>)
 8006448:	f7fc fe2e 	bl	80030a8 <HAL_TIM_Base_Init>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8006452:	f000 fa07 	bl	8006864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800645a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800645c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006460:	4619      	mov	r1, r3
 8006462:	4832      	ldr	r0, [pc, #200]	; (800652c <MX_TIM1_Init+0x154>)
 8006464:	f7fd fa1a 	bl	800389c <HAL_TIM_ConfigClockSource>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800646e:	f000 f9f9 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006472:	482e      	ldr	r0, [pc, #184]	; (800652c <MX_TIM1_Init+0x154>)
 8006474:	f7fc fe87 	bl	8003186 <HAL_TIM_PWM_Init>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800647e:	f000 f9f1 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006486:	2300      	movs	r3, #0
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800648a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800648e:	4619      	mov	r1, r3
 8006490:	4826      	ldr	r0, [pc, #152]	; (800652c <MX_TIM1_Init+0x154>)
 8006492:	f7fd fe28 	bl	80040e6 <HAL_TIMEx_MasterConfigSynchronization>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800649c:	f000 f9e2 	bl	8006864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064a0:	2360      	movs	r3, #96	; 0x60
 80064a2:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064a8:	2300      	movs	r3, #0
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064ac:	2300      	movs	r3, #0
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064b4:	2300      	movs	r3, #0
 80064b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064b8:	2300      	movs	r3, #0
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064bc:	f107 031c 	add.w	r3, r7, #28
 80064c0:	2200      	movs	r2, #0
 80064c2:	4619      	mov	r1, r3
 80064c4:	4819      	ldr	r0, [pc, #100]	; (800652c <MX_TIM1_Init+0x154>)
 80064c6:	f7fd f923 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80064d0:	f000 f9c8 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064d4:	f107 031c 	add.w	r3, r7, #28
 80064d8:	2204      	movs	r2, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	4813      	ldr	r0, [pc, #76]	; (800652c <MX_TIM1_Init+0x154>)
 80064de:	f7fd f917 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80064e8:	f000 f9bc 	bl	8006864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006504:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800650a:	463b      	mov	r3, r7
 800650c:	4619      	mov	r1, r3
 800650e:	4807      	ldr	r0, [pc, #28]	; (800652c <MX_TIM1_Init+0x154>)
 8006510:	f7fd fd91 	bl	8004036 <HAL_TIMEx_ConfigBreakDeadTime>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800651a:	f000 f9a3 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800651e:	4803      	ldr	r0, [pc, #12]	; (800652c <MX_TIM1_Init+0x154>)
 8006520:	f000 fad2 	bl	8006ac8 <HAL_TIM_MspPostInit>

}
 8006524:	bf00      	nop
 8006526:	3750      	adds	r7, #80	; 0x50
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000308 	.word	0x20000308
 8006530:	40012c00 	.word	0x40012c00

08006534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08c      	sub	sp, #48	; 0x30
 8006538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800653a:	f107 030c 	add.w	r3, r7, #12
 800653e:	2224      	movs	r2, #36	; 0x24
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc02 	bl	8006d4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006548:	1d3b      	adds	r3, r7, #4
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006550:	4b21      	ldr	r3, [pc, #132]	; (80065d8 <MX_TIM2_Init+0xa4>)
 8006552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006556:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006558:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <MX_TIM2_Init+0xa4>)
 800655a:	2200      	movs	r2, #0
 800655c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800655e:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <MX_TIM2_Init+0xa4>)
 8006560:	2200      	movs	r2, #0
 8006562:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8006564:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <MX_TIM2_Init+0xa4>)
 8006566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800656a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800656c:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <MX_TIM2_Init+0xa4>)
 800656e:	2200      	movs	r2, #0
 8006570:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006572:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <MX_TIM2_Init+0xa4>)
 8006574:	2200      	movs	r2, #0
 8006576:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006578:	2303      	movs	r3, #3
 800657a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800657c:	2300      	movs	r3, #0
 800657e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8006588:	230f      	movs	r3, #15
 800658a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800658c:	2300      	movs	r3, #0
 800658e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006590:	2301      	movs	r3, #1
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006594:	2300      	movs	r3, #0
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8006598:	230f      	movs	r3, #15
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800659c:	f107 030c 	add.w	r3, r7, #12
 80065a0:	4619      	mov	r1, r3
 80065a2:	480d      	ldr	r0, [pc, #52]	; (80065d8 <MX_TIM2_Init+0xa4>)
 80065a4:	f7fc fe98 	bl	80032d8 <HAL_TIM_Encoder_Init>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80065ae:	f000 f959 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80065ba:	1d3b      	adds	r3, r7, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4806      	ldr	r0, [pc, #24]	; (80065d8 <MX_TIM2_Init+0xa4>)
 80065c0:	f7fd fd91 	bl	80040e6 <HAL_TIMEx_MasterConfigSynchronization>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80065ca:	f000 f94b 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80065ce:	bf00      	nop
 80065d0:	3730      	adds	r7, #48	; 0x30
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	2000034c 	.word	0x2000034c

080065dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08c      	sub	sp, #48	; 0x30
 80065e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80065e2:	f107 030c 	add.w	r3, r7, #12
 80065e6:	2224      	movs	r2, #36	; 0x24
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fbae 	bl	8006d4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <MX_TIM3_Init+0xa0>)
 80065fa:	4a21      	ldr	r2, [pc, #132]	; (8006680 <MX_TIM3_Init+0xa4>)
 80065fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80065fe:	4b1f      	ldr	r3, [pc, #124]	; (800667c <MX_TIM3_Init+0xa0>)
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <MX_TIM3_Init+0xa0>)
 8006606:	2200      	movs	r2, #0
 8006608:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 800660a:	4b1c      	ldr	r3, [pc, #112]	; (800667c <MX_TIM3_Init+0xa0>)
 800660c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006610:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <MX_TIM3_Init+0xa0>)
 8006614:	2200      	movs	r2, #0
 8006616:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006618:	4b18      	ldr	r3, [pc, #96]	; (800667c <MX_TIM3_Init+0xa0>)
 800661a:	2200      	movs	r2, #0
 800661c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800661e:	2303      	movs	r3, #3
 8006620:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006622:	2300      	movs	r3, #0
 8006624:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006626:	2301      	movs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800662a:	2300      	movs	r3, #0
 800662c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800662e:	230f      	movs	r3, #15
 8006630:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006632:	2300      	movs	r3, #0
 8006634:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006636:	2301      	movs	r3, #1
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800663a:	2300      	movs	r3, #0
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800663e:	230f      	movs	r3, #15
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006642:	f107 030c 	add.w	r3, r7, #12
 8006646:	4619      	mov	r1, r3
 8006648:	480c      	ldr	r0, [pc, #48]	; (800667c <MX_TIM3_Init+0xa0>)
 800664a:	f7fc fe45 	bl	80032d8 <HAL_TIM_Encoder_Init>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8006654:	f000 f906 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006658:	2300      	movs	r3, #0
 800665a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800665c:	2300      	movs	r3, #0
 800665e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	4619      	mov	r1, r3
 8006664:	4805      	ldr	r0, [pc, #20]	; (800667c <MX_TIM3_Init+0xa0>)
 8006666:	f7fd fd3e 	bl	80040e6 <HAL_TIMEx_MasterConfigSynchronization>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8006670:	f000 f8f8 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006674:	bf00      	nop
 8006676:	3730      	adds	r7, #48	; 0x30
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	200002b8 	.word	0x200002b8
 8006680:	40000400 	.word	0x40000400

08006684 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	609a      	str	r2, [r3, #8]
 8006696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006698:	463b      	mov	r3, r7
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80066a0:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <MX_TIM4_Init+0x94>)
 80066a2:	4a1e      	ldr	r2, [pc, #120]	; (800671c <MX_TIM4_Init+0x98>)
 80066a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80066a6:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <MX_TIM4_Init+0x94>)
 80066a8:	223f      	movs	r2, #63	; 0x3f
 80066aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <MX_TIM4_Init+0x94>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80066b2:	4b19      	ldr	r3, [pc, #100]	; (8006718 <MX_TIM4_Init+0x94>)
 80066b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80066b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066ba:	4b17      	ldr	r3, [pc, #92]	; (8006718 <MX_TIM4_Init+0x94>)
 80066bc:	2200      	movs	r2, #0
 80066be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066c0:	4b15      	ldr	r3, [pc, #84]	; (8006718 <MX_TIM4_Init+0x94>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80066c6:	4814      	ldr	r0, [pc, #80]	; (8006718 <MX_TIM4_Init+0x94>)
 80066c8:	f7fc fcee 	bl	80030a8 <HAL_TIM_Base_Init>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80066d2:	f000 f8c7 	bl	8006864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80066dc:	f107 0308 	add.w	r3, r7, #8
 80066e0:	4619      	mov	r1, r3
 80066e2:	480d      	ldr	r0, [pc, #52]	; (8006718 <MX_TIM4_Init+0x94>)
 80066e4:	f7fd f8da 	bl	800389c <HAL_TIM_ConfigClockSource>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80066ee:	f000 f8b9 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066f2:	2300      	movs	r3, #0
 80066f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066fa:	463b      	mov	r3, r7
 80066fc:	4619      	mov	r1, r3
 80066fe:	4806      	ldr	r0, [pc, #24]	; (8006718 <MX_TIM4_Init+0x94>)
 8006700:	f7fd fcf1 	bl	80040e6 <HAL_TIMEx_MasterConfigSynchronization>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800670a:	f000 f8ab 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000224 	.word	0x20000224
 800671c:	40000800 	.word	0x40000800

08006720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006724:	4b11      	ldr	r3, [pc, #68]	; (800676c <MX_USART2_UART_Init+0x4c>)
 8006726:	4a12      	ldr	r2, [pc, #72]	; (8006770 <MX_USART2_UART_Init+0x50>)
 8006728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800672a:	4b10      	ldr	r3, [pc, #64]	; (800676c <MX_USART2_UART_Init+0x4c>)
 800672c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006732:	4b0e      	ldr	r3, [pc, #56]	; (800676c <MX_USART2_UART_Init+0x4c>)
 8006734:	2200      	movs	r2, #0
 8006736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <MX_USART2_UART_Init+0x4c>)
 800673a:	2200      	movs	r2, #0
 800673c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <MX_USART2_UART_Init+0x4c>)
 8006740:	2200      	movs	r2, #0
 8006742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <MX_USART2_UART_Init+0x4c>)
 8006746:	220c      	movs	r2, #12
 8006748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800674a:	4b08      	ldr	r3, [pc, #32]	; (800676c <MX_USART2_UART_Init+0x4c>)
 800674c:	2200      	movs	r2, #0
 800674e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <MX_USART2_UART_Init+0x4c>)
 8006752:	2200      	movs	r2, #0
 8006754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006756:	4805      	ldr	r0, [pc, #20]	; (800676c <MX_USART2_UART_Init+0x4c>)
 8006758:	f7fd fd1b 	bl	8004192 <HAL_UART_Init>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006762:	f000 f87f 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006766:	bf00      	nop
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	2000038c 	.word	0x2000038c
 8006770:	40004400 	.word	0x40004400

08006774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800677a:	f107 0310 	add.w	r3, r7, #16
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	605a      	str	r2, [r3, #4]
 8006784:	609a      	str	r2, [r3, #8]
 8006786:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006788:	4b32      	ldr	r3, [pc, #200]	; (8006854 <MX_GPIO_Init+0xe0>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	4a31      	ldr	r2, [pc, #196]	; (8006854 <MX_GPIO_Init+0xe0>)
 800678e:	f043 0310 	orr.w	r3, r3, #16
 8006792:	6193      	str	r3, [r2, #24]
 8006794:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <MX_GPIO_Init+0xe0>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067a0:	4b2c      	ldr	r3, [pc, #176]	; (8006854 <MX_GPIO_Init+0xe0>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	4a2b      	ldr	r2, [pc, #172]	; (8006854 <MX_GPIO_Init+0xe0>)
 80067a6:	f043 0304 	orr.w	r3, r3, #4
 80067aa:	6193      	str	r3, [r2, #24]
 80067ac:	4b29      	ldr	r3, [pc, #164]	; (8006854 <MX_GPIO_Init+0xe0>)
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b8:	4b26      	ldr	r3, [pc, #152]	; (8006854 <MX_GPIO_Init+0xe0>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	4a25      	ldr	r2, [pc, #148]	; (8006854 <MX_GPIO_Init+0xe0>)
 80067be:	f043 0308 	orr.w	r3, r3, #8
 80067c2:	6193      	str	r3, [r2, #24]
 80067c4:	4b23      	ldr	r3, [pc, #140]	; (8006854 <MX_GPIO_Init+0xe0>)
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	607b      	str	r3, [r7, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80067d0:	2200      	movs	r2, #0
 80067d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067d6:	4820      	ldr	r0, [pc, #128]	; (8006858 <MX_GPIO_Init+0xe4>)
 80067d8:	f7fa ffbc 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067e2:	481e      	ldr	r0, [pc, #120]	; (800685c <MX_GPIO_Init+0xe8>)
 80067e4:	f7fa ffb6 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80067e8:	2200      	movs	r2, #0
 80067ea:	2138      	movs	r1, #56	; 0x38
 80067ec:	481c      	ldr	r0, [pc, #112]	; (8006860 <MX_GPIO_Init+0xec>)
 80067ee:	f7fa ffb1 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80067f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067fc:	2301      	movs	r3, #1
 80067fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006800:	2303      	movs	r3, #3
 8006802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	4619      	mov	r1, r3
 800680a:	4813      	ldr	r0, [pc, #76]	; (8006858 <MX_GPIO_Init+0xe4>)
 800680c:	f7fa fe44 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006816:	2301      	movs	r3, #1
 8006818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800681a:	2301      	movs	r3, #1
 800681c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800681e:	2302      	movs	r3, #2
 8006820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006822:	f107 0310 	add.w	r3, r7, #16
 8006826:	4619      	mov	r1, r3
 8006828:	480c      	ldr	r0, [pc, #48]	; (800685c <MX_GPIO_Init+0xe8>)
 800682a:	f7fa fe35 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800682e:	2338      	movs	r3, #56	; 0x38
 8006830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006832:	2301      	movs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006836:	2301      	movs	r3, #1
 8006838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800683a:	2302      	movs	r3, #2
 800683c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800683e:	f107 0310 	add.w	r3, r7, #16
 8006842:	4619      	mov	r1, r3
 8006844:	4806      	ldr	r0, [pc, #24]	; (8006860 <MX_GPIO_Init+0xec>)
 8006846:	f7fa fe27 	bl	8001498 <HAL_GPIO_Init>

}
 800684a:	bf00      	nop
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40021000 	.word	0x40021000
 8006858:	40011000 	.word	0x40011000
 800685c:	40010800 	.word	0x40010800
 8006860:	40010c00 	.word	0x40010c00

08006864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006868:	bf00      	nop
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006876:	4b15      	ldr	r3, [pc, #84]	; (80068cc <HAL_MspInit+0x5c>)
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	4a14      	ldr	r2, [pc, #80]	; (80068cc <HAL_MspInit+0x5c>)
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	6193      	str	r3, [r2, #24]
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <HAL_MspInit+0x5c>)
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <HAL_MspInit+0x5c>)
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <HAL_MspInit+0x5c>)
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	61d3      	str	r3, [r2, #28]
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <HAL_MspInit+0x5c>)
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	607b      	str	r3, [r7, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80068a6:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <HAL_MspInit+0x60>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	4a04      	ldr	r2, [pc, #16]	; (80068d0 <HAL_MspInit+0x60>)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr
 80068cc:	40021000 	.word	0x40021000
 80068d0:	40010000 	.word	0x40010000

080068d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068dc:	f107 0310 	add.w	r3, r7, #16
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	609a      	str	r2, [r3, #8]
 80068e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a16      	ldr	r2, [pc, #88]	; (8006948 <HAL_I2C_MspInit+0x74>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d124      	bne.n	800693e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068f4:	4b15      	ldr	r3, [pc, #84]	; (800694c <HAL_I2C_MspInit+0x78>)
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4a14      	ldr	r2, [pc, #80]	; (800694c <HAL_I2C_MspInit+0x78>)
 80068fa:	f043 0308 	orr.w	r3, r3, #8
 80068fe:	6193      	str	r3, [r2, #24]
 8006900:	4b12      	ldr	r3, [pc, #72]	; (800694c <HAL_I2C_MspInit+0x78>)
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800690c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006912:	2312      	movs	r3, #18
 8006914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006916:	2303      	movs	r3, #3
 8006918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800691a:	f107 0310 	add.w	r3, r7, #16
 800691e:	4619      	mov	r1, r3
 8006920:	480b      	ldr	r0, [pc, #44]	; (8006950 <HAL_I2C_MspInit+0x7c>)
 8006922:	f7fa fdb9 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <HAL_I2C_MspInit+0x78>)
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	4a08      	ldr	r2, [pc, #32]	; (800694c <HAL_I2C_MspInit+0x78>)
 800692c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006930:	61d3      	str	r3, [r2, #28]
 8006932:	4b06      	ldr	r3, [pc, #24]	; (800694c <HAL_I2C_MspInit+0x78>)
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693a:	60bb      	str	r3, [r7, #8]
 800693c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800693e:	bf00      	nop
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	40005800 	.word	0x40005800
 800694c:	40021000 	.word	0x40021000
 8006950:	40010c00 	.word	0x40010c00

08006954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a16      	ldr	r2, [pc, #88]	; (80069bc <HAL_TIM_Base_MspInit+0x68>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d10c      	bne.n	8006980 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006966:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <HAL_TIM_Base_MspInit+0x6c>)
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_TIM_Base_MspInit+0x6c>)
 800696c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006970:	6193      	str	r3, [r2, #24]
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <HAL_TIM_Base_MspInit+0x6c>)
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800697e:	e018      	b.n	80069b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a0f      	ldr	r2, [pc, #60]	; (80069c4 <HAL_TIM_Base_MspInit+0x70>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d113      	bne.n	80069b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800698a:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <HAL_TIM_Base_MspInit+0x6c>)
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <HAL_TIM_Base_MspInit+0x6c>)
 8006990:	f043 0304 	orr.w	r3, r3, #4
 8006994:	61d3      	str	r3, [r2, #28]
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <HAL_TIM_Base_MspInit+0x6c>)
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2100      	movs	r1, #0
 80069a6:	201e      	movs	r0, #30
 80069a8:	f7fa fcc9 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80069ac:	201e      	movs	r0, #30
 80069ae:	f7fa fce2 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40021000 	.word	0x40021000
 80069c4:	40000800 	.word	0x40000800

080069c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069d0:	f107 0318 	add.w	r3, r7, #24
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	605a      	str	r2, [r3, #4]
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e6:	d130      	bne.n	8006a4a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069e8:	4b34      	ldr	r3, [pc, #208]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	4a33      	ldr	r2, [pc, #204]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	61d3      	str	r3, [r2, #28]
 80069f4:	4b31      	ldr	r3, [pc, #196]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a00:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4a2d      	ldr	r2, [pc, #180]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a06:	f043 0304 	orr.w	r3, r3, #4
 8006a0a:	6193      	str	r3, [r2, #24]
 8006a0c:	4b2b      	ldr	r3, [pc, #172]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	613b      	str	r3, [r7, #16]
 8006a16:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a24:	f107 0318 	add.w	r3, r7, #24
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4825      	ldr	r0, [pc, #148]	; (8006ac0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8006a2c:	f7fa fd34 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006a30:	2302      	movs	r3, #2
 8006a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a34:	2300      	movs	r3, #0
 8006a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a3c:	f107 0318 	add.w	r3, r7, #24
 8006a40:	4619      	mov	r1, r3
 8006a42:	481f      	ldr	r0, [pc, #124]	; (8006ac0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8006a44:	f7fa fd28 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006a48:	e034      	b.n	8006ab4 <HAL_TIM_Encoder_MspInit+0xec>
  else if(htim_encoder->Instance==TIM3)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d12f      	bne.n	8006ab4 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	4a18      	ldr	r2, [pc, #96]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a5a:	f043 0302 	orr.w	r3, r3, #2
 8006a5e:	61d3      	str	r3, [r2, #28]
 8006a60:	4b16      	ldr	r3, [pc, #88]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a6c:	4b13      	ldr	r3, [pc, #76]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	4a12      	ldr	r2, [pc, #72]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a72:	f043 0304 	orr.w	r3, r3, #4
 8006a76:	6193      	str	r3, [r2, #24]
 8006a78:	4b10      	ldr	r3, [pc, #64]	; (8006abc <HAL_TIM_Encoder_MspInit+0xf4>)
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a90:	f107 0318 	add.w	r3, r7, #24
 8006a94:	4619      	mov	r1, r3
 8006a96:	480a      	ldr	r0, [pc, #40]	; (8006ac0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8006a98:	f7fa fcfe 	bl	8001498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006a9c:	2380      	movs	r3, #128	; 0x80
 8006a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa8:	f107 0318 	add.w	r3, r7, #24
 8006aac:	4619      	mov	r1, r3
 8006aae:	4804      	ldr	r0, [pc, #16]	; (8006ac0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8006ab0:	f7fa fcf2 	bl	8001498 <HAL_GPIO_Init>
}
 8006ab4:	bf00      	nop
 8006ab6:	3728      	adds	r7, #40	; 0x28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	40010800 	.word	0x40010800
 8006ac4:	40000400 	.word	0x40000400

08006ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad0:	f107 0310 	add.w	r3, r7, #16
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	609a      	str	r2, [r3, #8]
 8006adc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a10      	ldr	r2, [pc, #64]	; (8006b24 <HAL_TIM_MspPostInit+0x5c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d118      	bne.n	8006b1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <HAL_TIM_MspPostInit+0x60>)
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	4a0e      	ldr	r2, [pc, #56]	; (8006b28 <HAL_TIM_MspPostInit+0x60>)
 8006aee:	f043 0304 	orr.w	r3, r3, #4
 8006af2:	6193      	str	r3, [r2, #24]
 8006af4:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <HAL_TIM_MspPostInit+0x60>)
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b06:	2302      	movs	r3, #2
 8006b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b0e:	f107 0310 	add.w	r3, r7, #16
 8006b12:	4619      	mov	r1, r3
 8006b14:	4805      	ldr	r0, [pc, #20]	; (8006b2c <HAL_TIM_MspPostInit+0x64>)
 8006b16:	f7fa fcbf 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006b1a:	bf00      	nop
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	40010800 	.word	0x40010800

08006b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b38:	f107 0310 	add.w	r3, r7, #16
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	609a      	str	r2, [r3, #8]
 8006b44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1f      	ldr	r2, [pc, #124]	; (8006bc8 <HAL_UART_MspInit+0x98>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d137      	bne.n	8006bc0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b50:	4b1e      	ldr	r3, [pc, #120]	; (8006bcc <HAL_UART_MspInit+0x9c>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <HAL_UART_MspInit+0x9c>)
 8006b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b5a:	61d3      	str	r3, [r2, #28]
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <HAL_UART_MspInit+0x9c>)
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b68:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <HAL_UART_MspInit+0x9c>)
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	4a17      	ldr	r2, [pc, #92]	; (8006bcc <HAL_UART_MspInit+0x9c>)
 8006b6e:	f043 0304 	orr.w	r3, r3, #4
 8006b72:	6193      	str	r3, [r2, #24]
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <HAL_UART_MspInit+0x9c>)
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b80:	2304      	movs	r3, #4
 8006b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b84:	2302      	movs	r3, #2
 8006b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8c:	f107 0310 	add.w	r3, r7, #16
 8006b90:	4619      	mov	r1, r3
 8006b92:	480f      	ldr	r0, [pc, #60]	; (8006bd0 <HAL_UART_MspInit+0xa0>)
 8006b94:	f7fa fc80 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006b98:	2308      	movs	r3, #8
 8006b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba4:	f107 0310 	add.w	r3, r7, #16
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4809      	ldr	r0, [pc, #36]	; (8006bd0 <HAL_UART_MspInit+0xa0>)
 8006bac:	f7fa fc74 	bl	8001498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	2026      	movs	r0, #38	; 0x26
 8006bb6:	f7fa fbc2 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006bba:	2026      	movs	r0, #38	; 0x26
 8006bbc:	f7fa fbdb 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006bc0:	bf00      	nop
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40004400 	.word	0x40004400
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40010800 	.word	0x40010800

08006bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006bd8:	bf00      	nop
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr

08006be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006be4:	e7fe      	b.n	8006be4 <HardFault_Handler+0x4>

08006be6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006be6:	b480      	push	{r7}
 8006be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bea:	e7fe      	b.n	8006bea <MemManage_Handler+0x4>

08006bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bf0:	e7fe      	b.n	8006bf0 <BusFault_Handler+0x4>

08006bf2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006bf6:	e7fe      	b.n	8006bf6 <UsageFault_Handler+0x4>

08006bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006bfc:	bf00      	nop
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c08:	bf00      	nop
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c14:	bf00      	nop
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr

08006c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c20:	f7fa fa9e 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c24:	bf00      	nop
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006c2c:	4802      	ldr	r0, [pc, #8]	; (8006c38 <TIM4_IRQHandler+0x10>)
 8006c2e:	f7fc fc67 	bl	8003500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000224 	.word	0x20000224

08006c3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006c40:	4802      	ldr	r0, [pc, #8]	; (8006c4c <USART2_IRQHandler+0x10>)
 8006c42:	f7fd fc87 	bl	8004554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	2000038c 	.word	0x2000038c

08006c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006c54:	4b15      	ldr	r3, [pc, #84]	; (8006cac <SystemInit+0x5c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a14      	ldr	r2, [pc, #80]	; (8006cac <SystemInit+0x5c>)
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006c60:	4b12      	ldr	r3, [pc, #72]	; (8006cac <SystemInit+0x5c>)
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	4911      	ldr	r1, [pc, #68]	; (8006cac <SystemInit+0x5c>)
 8006c66:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <SystemInit+0x60>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <SystemInit+0x5c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a0e      	ldr	r2, [pc, #56]	; (8006cac <SystemInit+0x5c>)
 8006c72:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <SystemInit+0x5c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <SystemInit+0x5c>)
 8006c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c86:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <SystemInit+0x5c>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	4a07      	ldr	r2, [pc, #28]	; (8006cac <SystemInit+0x5c>)
 8006c8e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006c92:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <SystemInit+0x5c>)
 8006c96:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006c9a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <SystemInit+0x64>)
 8006c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ca2:	609a      	str	r2, [r3, #8]
#endif 
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	f8ff0000 	.word	0xf8ff0000
 8006cb4:	e000ed00 	.word	0xe000ed00

08006cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006cb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006cba:	e003      	b.n	8006cc4 <LoopCopyDataInit>

08006cbc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006cbc:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006cbe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006cc0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006cc2:	3104      	adds	r1, #4

08006cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006cc4:	480a      	ldr	r0, [pc, #40]	; (8006cf0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006cc8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006cca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006ccc:	d3f6      	bcc.n	8006cbc <CopyDataInit>
  ldr r2, =_sbss
 8006cce:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006cd0:	e002      	b.n	8006cd8 <LoopFillZerobss>

08006cd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006cd2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006cd4:	f842 3b04 	str.w	r3, [r2], #4

08006cd8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006cd8:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006cda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006cdc:	d3f9      	bcc.n	8006cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006cde:	f7ff ffb7 	bl	8006c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ce2:	f000 f80f 	bl	8006d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006ce6:	f7ff f9a1 	bl	800602c <main>
  bx lr
 8006cea:	4770      	bx	lr
  ldr r3, =_sidata
 8006cec:	08007300 	.word	0x08007300
  ldr r0, =_sdata
 8006cf0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006cf4:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8006cf8:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8006cfc:	20000410 	.word	0x20000410

08006d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d00:	e7fe      	b.n	8006d00 <ADC1_2_IRQHandler>
	...

08006d04 <__libc_init_array>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	2500      	movs	r5, #0
 8006d08:	4e0c      	ldr	r6, [pc, #48]	; (8006d3c <__libc_init_array+0x38>)
 8006d0a:	4c0d      	ldr	r4, [pc, #52]	; (8006d40 <__libc_init_array+0x3c>)
 8006d0c:	1ba4      	subs	r4, r4, r6
 8006d0e:	10a4      	asrs	r4, r4, #2
 8006d10:	42a5      	cmp	r5, r4
 8006d12:	d109      	bne.n	8006d28 <__libc_init_array+0x24>
 8006d14:	f000 fa92 	bl	800723c <_init>
 8006d18:	2500      	movs	r5, #0
 8006d1a:	4e0a      	ldr	r6, [pc, #40]	; (8006d44 <__libc_init_array+0x40>)
 8006d1c:	4c0a      	ldr	r4, [pc, #40]	; (8006d48 <__libc_init_array+0x44>)
 8006d1e:	1ba4      	subs	r4, r4, r6
 8006d20:	10a4      	asrs	r4, r4, #2
 8006d22:	42a5      	cmp	r5, r4
 8006d24:	d105      	bne.n	8006d32 <__libc_init_array+0x2e>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d2c:	4798      	blx	r3
 8006d2e:	3501      	adds	r5, #1
 8006d30:	e7ee      	b.n	8006d10 <__libc_init_array+0xc>
 8006d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d36:	4798      	blx	r3
 8006d38:	3501      	adds	r5, #1
 8006d3a:	e7f2      	b.n	8006d22 <__libc_init_array+0x1e>
 8006d3c:	080072f8 	.word	0x080072f8
 8006d40:	080072f8 	.word	0x080072f8
 8006d44:	080072f8 	.word	0x080072f8
 8006d48:	080072fc 	.word	0x080072fc

08006d4c <memset>:
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	4402      	add	r2, r0
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d100      	bne.n	8006d56 <memset+0xa>
 8006d54:	4770      	bx	lr
 8006d56:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5a:	e7f9      	b.n	8006d50 <memset+0x4>

08006d5c <atan2>:
 8006d5c:	f000 b800 	b.w	8006d60 <__ieee754_atan2>

08006d60 <__ieee754_atan2>:
 8006d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	4256      	negs	r6, r2
 8006d66:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8006d6a:	4316      	orrs	r6, r2
 8006d6c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006f18 <__ieee754_atan2+0x1b8>
 8006d70:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8006d74:	454e      	cmp	r6, r9
 8006d76:	4604      	mov	r4, r0
 8006d78:	460d      	mov	r5, r1
 8006d7a:	469e      	mov	lr, r3
 8006d7c:	d808      	bhi.n	8006d90 <__ieee754_atan2+0x30>
 8006d7e:	4246      	negs	r6, r0
 8006d80:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006d84:	4306      	orrs	r6, r0
 8006d86:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8006d8a:	454e      	cmp	r6, r9
 8006d8c:	4688      	mov	r8, r1
 8006d8e:	d906      	bls.n	8006d9e <__ieee754_atan2+0x3e>
 8006d90:	4620      	mov	r0, r4
 8006d92:	4629      	mov	r1, r5
 8006d94:	f7f9 f9e2 	bl	800015c <__adddf3>
 8006d98:	4604      	mov	r4, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	e030      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006d9e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006da2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006da6:	4316      	orrs	r6, r2
 8006da8:	d103      	bne.n	8006db2 <__ieee754_atan2+0x52>
 8006daa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dae:	f000 b8b7 	b.w	8006f20 <atan>
 8006db2:	179e      	asrs	r6, r3, #30
 8006db4:	f006 0602 	and.w	r6, r6, #2
 8006db8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006dbc:	ea57 0100 	orrs.w	r1, r7, r0
 8006dc0:	d107      	bne.n	8006dd2 <__ieee754_atan2+0x72>
 8006dc2:	2e02      	cmp	r6, #2
 8006dc4:	d079      	beq.n	8006eba <__ieee754_atan2+0x15a>
 8006dc6:	2e03      	cmp	r6, #3
 8006dc8:	d11a      	bne.n	8006e00 <__ieee754_atan2+0xa0>
 8006dca:	a541      	add	r5, pc, #260	; (adr r5, 8006ed0 <__ieee754_atan2+0x170>)
 8006dcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dd0:	e016      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006dd2:	ea5c 0102 	orrs.w	r1, ip, r2
 8006dd6:	d106      	bne.n	8006de6 <__ieee754_atan2+0x86>
 8006dd8:	f1b8 0f00 	cmp.w	r8, #0
 8006ddc:	da71      	bge.n	8006ec2 <__ieee754_atan2+0x162>
 8006dde:	a53e      	add	r5, pc, #248	; (adr r5, 8006ed8 <__ieee754_atan2+0x178>)
 8006de0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006de4:	e00c      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006de6:	45cc      	cmp	ip, r9
 8006de8:	d123      	bne.n	8006e32 <__ieee754_atan2+0xd2>
 8006dea:	4567      	cmp	r7, ip
 8006dec:	d114      	bne.n	8006e18 <__ieee754_atan2+0xb8>
 8006dee:	2e02      	cmp	r6, #2
 8006df0:	d00a      	beq.n	8006e08 <__ieee754_atan2+0xa8>
 8006df2:	2e03      	cmp	r6, #3
 8006df4:	d00c      	beq.n	8006e10 <__ieee754_atan2+0xb0>
 8006df6:	2e01      	cmp	r6, #1
 8006df8:	d15b      	bne.n	8006eb2 <__ieee754_atan2+0x152>
 8006dfa:	a539      	add	r5, pc, #228	; (adr r5, 8006ee0 <__ieee754_atan2+0x180>)
 8006dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e00:	4620      	mov	r0, r4
 8006e02:	4629      	mov	r1, r5
 8006e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	a537      	add	r5, pc, #220	; (adr r5, 8006ee8 <__ieee754_atan2+0x188>)
 8006e0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e0e:	e7f7      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006e10:	a537      	add	r5, pc, #220	; (adr r5, 8006ef0 <__ieee754_atan2+0x190>)
 8006e12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e16:	e7f3      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006e18:	2e02      	cmp	r6, #2
 8006e1a:	d04e      	beq.n	8006eba <__ieee754_atan2+0x15a>
 8006e1c:	2e03      	cmp	r6, #3
 8006e1e:	d0d4      	beq.n	8006dca <__ieee754_atan2+0x6a>
 8006e20:	2e01      	cmp	r6, #1
 8006e22:	f04f 0400 	mov.w	r4, #0
 8006e26:	d102      	bne.n	8006e2e <__ieee754_atan2+0xce>
 8006e28:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006e2c:	e7e8      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006e2e:	2500      	movs	r5, #0
 8006e30:	e7e6      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006e32:	454f      	cmp	r7, r9
 8006e34:	d0d0      	beq.n	8006dd8 <__ieee754_atan2+0x78>
 8006e36:	eba7 070c 	sub.w	r7, r7, ip
 8006e3a:	153f      	asrs	r7, r7, #20
 8006e3c:	2f3c      	cmp	r7, #60	; 0x3c
 8006e3e:	dc1e      	bgt.n	8006e7e <__ieee754_atan2+0x11e>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da01      	bge.n	8006e48 <__ieee754_atan2+0xe8>
 8006e44:	373c      	adds	r7, #60	; 0x3c
 8006e46:	db1e      	blt.n	8006e86 <__ieee754_atan2+0x126>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	f7f9 fc66 	bl	800071c <__aeabi_ddiv>
 8006e50:	f000 f9f0 	bl	8007234 <fabs>
 8006e54:	f000 f864 	bl	8006f20 <atan>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	2e01      	cmp	r6, #1
 8006e5e:	d015      	beq.n	8006e8c <__ieee754_atan2+0x12c>
 8006e60:	2e02      	cmp	r6, #2
 8006e62:	d017      	beq.n	8006e94 <__ieee754_atan2+0x134>
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	d0cb      	beq.n	8006e00 <__ieee754_atan2+0xa0>
 8006e68:	a323      	add	r3, pc, #140	; (adr r3, 8006ef8 <__ieee754_atan2+0x198>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	f7f9 f971 	bl	8000158 <__aeabi_dsub>
 8006e76:	a322      	add	r3, pc, #136	; (adr r3, 8006f00 <__ieee754_atan2+0x1a0>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	e016      	b.n	8006eac <__ieee754_atan2+0x14c>
 8006e7e:	a522      	add	r5, pc, #136	; (adr r5, 8006f08 <__ieee754_atan2+0x1a8>)
 8006e80:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e84:	e7ea      	b.n	8006e5c <__ieee754_atan2+0xfc>
 8006e86:	2400      	movs	r4, #0
 8006e88:	2500      	movs	r5, #0
 8006e8a:	e7e7      	b.n	8006e5c <__ieee754_atan2+0xfc>
 8006e8c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e90:	461d      	mov	r5, r3
 8006e92:	e7b5      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006e94:	a318      	add	r3, pc, #96	; (adr r3, 8006ef8 <__ieee754_atan2+0x198>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	f7f9 f95b 	bl	8000158 <__aeabi_dsub>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	a116      	add	r1, pc, #88	; (adr r1, 8006f00 <__ieee754_atan2+0x1a0>)
 8006ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eac:	f7f9 f954 	bl	8000158 <__aeabi_dsub>
 8006eb0:	e772      	b.n	8006d98 <__ieee754_atan2+0x38>
 8006eb2:	a517      	add	r5, pc, #92	; (adr r5, 8006f10 <__ieee754_atan2+0x1b0>)
 8006eb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006eb8:	e7a2      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006eba:	a511      	add	r5, pc, #68	; (adr r5, 8006f00 <__ieee754_atan2+0x1a0>)
 8006ebc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ec0:	e79e      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006ec2:	a511      	add	r5, pc, #68	; (adr r5, 8006f08 <__ieee754_atan2+0x1a8>)
 8006ec4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ec8:	e79a      	b.n	8006e00 <__ieee754_atan2+0xa0>
 8006eca:	bf00      	nop
 8006ecc:	f3af 8000 	nop.w
 8006ed0:	54442d18 	.word	0x54442d18
 8006ed4:	c00921fb 	.word	0xc00921fb
 8006ed8:	54442d18 	.word	0x54442d18
 8006edc:	bff921fb 	.word	0xbff921fb
 8006ee0:	54442d18 	.word	0x54442d18
 8006ee4:	bfe921fb 	.word	0xbfe921fb
 8006ee8:	7f3321d2 	.word	0x7f3321d2
 8006eec:	4002d97c 	.word	0x4002d97c
 8006ef0:	7f3321d2 	.word	0x7f3321d2
 8006ef4:	c002d97c 	.word	0xc002d97c
 8006ef8:	33145c07 	.word	0x33145c07
 8006efc:	3ca1a626 	.word	0x3ca1a626
 8006f00:	54442d18 	.word	0x54442d18
 8006f04:	400921fb 	.word	0x400921fb
 8006f08:	54442d18 	.word	0x54442d18
 8006f0c:	3ff921fb 	.word	0x3ff921fb
 8006f10:	54442d18 	.word	0x54442d18
 8006f14:	3fe921fb 	.word	0x3fe921fb
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	00000000 	.word	0x00000000

08006f20 <atan>:
 8006f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	4bb6      	ldr	r3, [pc, #728]	; (8007200 <atan+0x2e0>)
 8006f26:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f2a:	429e      	cmp	r6, r3
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	460d      	mov	r5, r1
 8006f30:	468b      	mov	fp, r1
 8006f32:	dd17      	ble.n	8006f64 <atan+0x44>
 8006f34:	4bb3      	ldr	r3, [pc, #716]	; (8007204 <atan+0x2e4>)
 8006f36:	429e      	cmp	r6, r3
 8006f38:	dc01      	bgt.n	8006f3e <atan+0x1e>
 8006f3a:	d109      	bne.n	8006f50 <atan+0x30>
 8006f3c:	b140      	cbz	r0, 8006f50 <atan+0x30>
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7f9 f909 	bl	800015c <__adddf3>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	e005      	b.n	8006f5c <atan+0x3c>
 8006f50:	f1bb 0f00 	cmp.w	fp, #0
 8006f54:	4cac      	ldr	r4, [pc, #688]	; (8007208 <atan+0x2e8>)
 8006f56:	f340 8121 	ble.w	800719c <atan+0x27c>
 8006f5a:	4dac      	ldr	r5, [pc, #688]	; (800720c <atan+0x2ec>)
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	4baa      	ldr	r3, [pc, #680]	; (8007210 <atan+0x2f0>)
 8006f66:	429e      	cmp	r6, r3
 8006f68:	dc11      	bgt.n	8006f8e <atan+0x6e>
 8006f6a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006f6e:	429e      	cmp	r6, r3
 8006f70:	dc0a      	bgt.n	8006f88 <atan+0x68>
 8006f72:	a38b      	add	r3, pc, #556	; (adr r3, 80071a0 <atan+0x280>)
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f7f9 f8f0 	bl	800015c <__adddf3>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4ba5      	ldr	r3, [pc, #660]	; (8007214 <atan+0x2f4>)
 8006f80:	f7f9 fd32 	bl	80009e8 <__aeabi_dcmpgt>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d1e9      	bne.n	8006f5c <atan+0x3c>
 8006f88:	f04f 3aff 	mov.w	sl, #4294967295
 8006f8c:	e027      	b.n	8006fde <atan+0xbe>
 8006f8e:	f000 f951 	bl	8007234 <fabs>
 8006f92:	4ba1      	ldr	r3, [pc, #644]	; (8007218 <atan+0x2f8>)
 8006f94:	4604      	mov	r4, r0
 8006f96:	429e      	cmp	r6, r3
 8006f98:	460d      	mov	r5, r1
 8006f9a:	f300 80b8 	bgt.w	800710e <atan+0x1ee>
 8006f9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006fa2:	429e      	cmp	r6, r3
 8006fa4:	f300 809c 	bgt.w	80070e0 <atan+0x1c0>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	f7f9 f8d6 	bl	800015c <__adddf3>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4b98      	ldr	r3, [pc, #608]	; (8007214 <atan+0x2f4>)
 8006fb4:	f7f9 f8d0 	bl	8000158 <__aeabi_dsub>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7f9 f8c9 	bl	800015c <__adddf3>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7f9 fba3 	bl	800071c <__aeabi_ddiv>
 8006fd6:	f04f 0a00 	mov.w	sl, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	4622      	mov	r2, r4
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7f9 fa6f 	bl	80004c8 <__aeabi_dmul>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	f7f9 fa69 	bl	80004c8 <__aeabi_dmul>
 8006ff6:	a36c      	add	r3, pc, #432	; (adr r3, 80071a8 <atan+0x288>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	460f      	mov	r7, r1
 8007000:	f7f9 fa62 	bl	80004c8 <__aeabi_dmul>
 8007004:	a36a      	add	r3, pc, #424	; (adr r3, 80071b0 <atan+0x290>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 f8a7 	bl	800015c <__adddf3>
 800700e:	4632      	mov	r2, r6
 8007010:	463b      	mov	r3, r7
 8007012:	f7f9 fa59 	bl	80004c8 <__aeabi_dmul>
 8007016:	a368      	add	r3, pc, #416	; (adr r3, 80071b8 <atan+0x298>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f7f9 f89e 	bl	800015c <__adddf3>
 8007020:	4632      	mov	r2, r6
 8007022:	463b      	mov	r3, r7
 8007024:	f7f9 fa50 	bl	80004c8 <__aeabi_dmul>
 8007028:	a365      	add	r3, pc, #404	; (adr r3, 80071c0 <atan+0x2a0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f895 	bl	800015c <__adddf3>
 8007032:	4632      	mov	r2, r6
 8007034:	463b      	mov	r3, r7
 8007036:	f7f9 fa47 	bl	80004c8 <__aeabi_dmul>
 800703a:	a363      	add	r3, pc, #396	; (adr r3, 80071c8 <atan+0x2a8>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 f88c 	bl	800015c <__adddf3>
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fa3e 	bl	80004c8 <__aeabi_dmul>
 800704c:	a360      	add	r3, pc, #384	; (adr r3, 80071d0 <atan+0x2b0>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f883 	bl	800015c <__adddf3>
 8007056:	4642      	mov	r2, r8
 8007058:	464b      	mov	r3, r9
 800705a:	f7f9 fa35 	bl	80004c8 <__aeabi_dmul>
 800705e:	a35e      	add	r3, pc, #376	; (adr r3, 80071d8 <atan+0x2b8>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 fa2c 	bl	80004c8 <__aeabi_dmul>
 8007070:	a35b      	add	r3, pc, #364	; (adr r3, 80071e0 <atan+0x2c0>)
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f7f9 f86f 	bl	8000158 <__aeabi_dsub>
 800707a:	4632      	mov	r2, r6
 800707c:	463b      	mov	r3, r7
 800707e:	f7f9 fa23 	bl	80004c8 <__aeabi_dmul>
 8007082:	a359      	add	r3, pc, #356	; (adr r3, 80071e8 <atan+0x2c8>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 f866 	bl	8000158 <__aeabi_dsub>
 800708c:	4632      	mov	r2, r6
 800708e:	463b      	mov	r3, r7
 8007090:	f7f9 fa1a 	bl	80004c8 <__aeabi_dmul>
 8007094:	a356      	add	r3, pc, #344	; (adr r3, 80071f0 <atan+0x2d0>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f7f9 f85d 	bl	8000158 <__aeabi_dsub>
 800709e:	4632      	mov	r2, r6
 80070a0:	463b      	mov	r3, r7
 80070a2:	f7f9 fa11 	bl	80004c8 <__aeabi_dmul>
 80070a6:	a354      	add	r3, pc, #336	; (adr r3, 80071f8 <atan+0x2d8>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 f854 	bl	8000158 <__aeabi_dsub>
 80070b0:	4632      	mov	r2, r6
 80070b2:	463b      	mov	r3, r7
 80070b4:	f7f9 fa08 	bl	80004c8 <__aeabi_dmul>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	f7f9 f84c 	bl	800015c <__adddf3>
 80070c4:	4622      	mov	r2, r4
 80070c6:	462b      	mov	r3, r5
 80070c8:	f7f9 f9fe 	bl	80004c8 <__aeabi_dmul>
 80070cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	d144      	bne.n	8007160 <atan+0x240>
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 f83d 	bl	8000158 <__aeabi_dsub>
 80070de:	e734      	b.n	8006f4a <atan+0x2a>
 80070e0:	2200      	movs	r2, #0
 80070e2:	4b4c      	ldr	r3, [pc, #304]	; (8007214 <atan+0x2f4>)
 80070e4:	f7f9 f838 	bl	8000158 <__aeabi_dsub>
 80070e8:	2200      	movs	r2, #0
 80070ea:	4606      	mov	r6, r0
 80070ec:	460f      	mov	r7, r1
 80070ee:	4b49      	ldr	r3, [pc, #292]	; (8007214 <atan+0x2f4>)
 80070f0:	4620      	mov	r0, r4
 80070f2:	4629      	mov	r1, r5
 80070f4:	f7f9 f832 	bl	800015c <__adddf3>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	f7f9 fb0c 	bl	800071c <__aeabi_ddiv>
 8007104:	f04f 0a01 	mov.w	sl, #1
 8007108:	4604      	mov	r4, r0
 800710a:	460d      	mov	r5, r1
 800710c:	e767      	b.n	8006fde <atan+0xbe>
 800710e:	4b43      	ldr	r3, [pc, #268]	; (800721c <atan+0x2fc>)
 8007110:	429e      	cmp	r6, r3
 8007112:	dc1a      	bgt.n	800714a <atan+0x22a>
 8007114:	2200      	movs	r2, #0
 8007116:	4b42      	ldr	r3, [pc, #264]	; (8007220 <atan+0x300>)
 8007118:	f7f9 f81e 	bl	8000158 <__aeabi_dsub>
 800711c:	2200      	movs	r2, #0
 800711e:	4606      	mov	r6, r0
 8007120:	460f      	mov	r7, r1
 8007122:	4b3f      	ldr	r3, [pc, #252]	; (8007220 <atan+0x300>)
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 f9ce 	bl	80004c8 <__aeabi_dmul>
 800712c:	2200      	movs	r2, #0
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <atan+0x2f4>)
 8007130:	f7f9 f814 	bl	800015c <__adddf3>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4630      	mov	r0, r6
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 faee 	bl	800071c <__aeabi_ddiv>
 8007140:	f04f 0a02 	mov.w	sl, #2
 8007144:	4604      	mov	r4, r0
 8007146:	460d      	mov	r5, r1
 8007148:	e749      	b.n	8006fde <atan+0xbe>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	2000      	movs	r0, #0
 8007150:	4934      	ldr	r1, [pc, #208]	; (8007224 <atan+0x304>)
 8007152:	f7f9 fae3 	bl	800071c <__aeabi_ddiv>
 8007156:	f04f 0a03 	mov.w	sl, #3
 800715a:	4604      	mov	r4, r0
 800715c:	460d      	mov	r5, r1
 800715e:	e73e      	b.n	8006fde <atan+0xbe>
 8007160:	4b31      	ldr	r3, [pc, #196]	; (8007228 <atan+0x308>)
 8007162:	4e32      	ldr	r6, [pc, #200]	; (800722c <atan+0x30c>)
 8007164:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007168:	4456      	add	r6, sl
 800716a:	449a      	add	sl, r3
 800716c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007170:	f7f8 fff2 	bl	8000158 <__aeabi_dsub>
 8007174:	4622      	mov	r2, r4
 8007176:	462b      	mov	r3, r5
 8007178:	f7f8 ffee 	bl	8000158 <__aeabi_dsub>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007184:	f7f8 ffe8 	bl	8000158 <__aeabi_dsub>
 8007188:	f1bb 0f00 	cmp.w	fp, #0
 800718c:	4604      	mov	r4, r0
 800718e:	460d      	mov	r5, r1
 8007190:	f6bf aee4 	bge.w	8006f5c <atan+0x3c>
 8007194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007198:	461d      	mov	r5, r3
 800719a:	e6df      	b.n	8006f5c <atan+0x3c>
 800719c:	4d24      	ldr	r5, [pc, #144]	; (8007230 <atan+0x310>)
 800719e:	e6dd      	b.n	8006f5c <atan+0x3c>
 80071a0:	8800759c 	.word	0x8800759c
 80071a4:	7e37e43c 	.word	0x7e37e43c
 80071a8:	e322da11 	.word	0xe322da11
 80071ac:	3f90ad3a 	.word	0x3f90ad3a
 80071b0:	24760deb 	.word	0x24760deb
 80071b4:	3fa97b4b 	.word	0x3fa97b4b
 80071b8:	a0d03d51 	.word	0xa0d03d51
 80071bc:	3fb10d66 	.word	0x3fb10d66
 80071c0:	c54c206e 	.word	0xc54c206e
 80071c4:	3fb745cd 	.word	0x3fb745cd
 80071c8:	920083ff 	.word	0x920083ff
 80071cc:	3fc24924 	.word	0x3fc24924
 80071d0:	5555550d 	.word	0x5555550d
 80071d4:	3fd55555 	.word	0x3fd55555
 80071d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80071dc:	bfa2b444 	.word	0xbfa2b444
 80071e0:	52defd9a 	.word	0x52defd9a
 80071e4:	3fadde2d 	.word	0x3fadde2d
 80071e8:	af749a6d 	.word	0xaf749a6d
 80071ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80071f0:	fe231671 	.word	0xfe231671
 80071f4:	3fbc71c6 	.word	0x3fbc71c6
 80071f8:	9998ebc4 	.word	0x9998ebc4
 80071fc:	3fc99999 	.word	0x3fc99999
 8007200:	440fffff 	.word	0x440fffff
 8007204:	7ff00000 	.word	0x7ff00000
 8007208:	54442d18 	.word	0x54442d18
 800720c:	3ff921fb 	.word	0x3ff921fb
 8007210:	3fdbffff 	.word	0x3fdbffff
 8007214:	3ff00000 	.word	0x3ff00000
 8007218:	3ff2ffff 	.word	0x3ff2ffff
 800721c:	40037fff 	.word	0x40037fff
 8007220:	3ff80000 	.word	0x3ff80000
 8007224:	bff00000 	.word	0xbff00000
 8007228:	080072d8 	.word	0x080072d8
 800722c:	080072b8 	.word	0x080072b8
 8007230:	bff921fb 	.word	0xbff921fb

08007234 <fabs>:
 8007234:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007238:	4619      	mov	r1, r3
 800723a:	4770      	bx	lr

0800723c <_init>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	bf00      	nop
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr

08007248 <_fini>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr
